{"version":3,"sources":["webpack:///./src/components/Relative.tsx","webpack:///./src/components/ClippedBtn.tsx","webpack:///./src/components/compositions/SocialButton.tsx","webpack:///./src/components/compositions/Contacts.tsx","webpack:///./src/layouts/ContactLayout.tsx","webpack:///./src/pages/contact.tsx","webpack:///./src/data/contacts.ts"],"names":["Relative","styled","div","ClippedBtn","theme","breakpoints","max","tablet","color","background","css","min","desktop","StyledSocialIcon","SocialButton","children","href","iconPath","target","DynamicIcon","path","Absolute","Flex","justifyContent","Contacts","contacts","map","key","text","ContactLayout","SEO","title","CenteredBlock","Grid","columns","rows","ContactPage","CONTACTS"],"mappings":"oNAEaA,EAAmDC,IAAOC,IAAV,2DAAGD,CAAH,wB,oCCYhDE,EAKTF,IAAOC,IAAV,6DAAGD,CAAH,6SAMUG,IAAMC,YAAYC,IAAIC,QAG3B,oBACAC,aADA,MACQ,QADR,MAEAC,kBAFA,MAEa,OAFb,SAGkDC,YAHjD,CAAD,6BAISF,EACKC,KAITL,IAAMC,YAAYM,IAAIC,SASzB,oBACAJ,aADA,MACQ,QADR,MAEAC,kBAFA,MAEa,OAFb,SAGkDC,YAHjD,CAAD,6BAISF,EACKC,M,YChChBI,EAA2DZ,IAAOC,IAAV,qFAAGD,CAAH,mCAKvD,SAASa,EAAT,GAM8B,IALnCC,EAKmC,EALnCA,SACAP,EAImC,EAJnCA,MACAC,EAGmC,EAHnCA,WACAO,EAEmC,EAFnCA,KACAC,EACmC,EADnCA,SAEA,OACE,kBAAC,IAAD,CAASD,KAAMA,EAAME,OAAO,SAC1B,kBAAClB,EAAD,KACE,kBAACa,EAAD,KACE,kBAACM,EAAA,EAAD,CAAaC,KAAMH,KAErB,kBAACI,EAAA,EAAD,KACE,kBAAClB,EAAD,CAAYM,WAAYA,EAAYD,MAAOA,GACzC,kBAACc,EAAA,EAAD,CAAMC,eAAe,gBACnB,8BAAOR,QC9Bd,SAASS,EAAT,GAA6D,IAAzCC,EAAyC,EAAzCA,SACzB,OACE,oCACGA,EAASC,KACR,WAEEC,GAFF,IACIlB,EADJ,EACIA,WAAYQ,EADhB,EACgBA,SAAUD,EAD1B,EAC0BA,KAAMY,EADhC,EACgCA,KADhC,OAIE,kBAACd,EAAD,CACEL,WAAYA,EACZQ,SAAUA,EACVD,KAAMA,EACNW,IAAKA,GAEJC,OCXN,SAASC,EAAT,GAAuE,IAA9CJ,EAA8C,EAA9CA,SAC9B,OACE,oCACE,kBAACK,EAAA,EAAD,CACEC,MAAM,YAGR,kBAACC,EAAA,EAAD,KACE,6CACA,oYAQA,kBAACC,EAAA,EAAD,CAAMC,QAAS,EAAGC,KAAM,GACtB,kBAACX,EAAD,CAAUC,SAAUA,S,oCC/B9B,oEAgBeW,UATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeX,SAAUY,S,kCCD/B,kCAAO,IAAMA,EAAuB,CAClC,CACE5B,WAAY,UACZQ,SAAU,kBACVD,KAAM,kCACNY,KAAM,QAER,CACEnB,WAAY,UACZQ,SAAU,qBACVD,KAAM,2DACNY,KAAM,YAER,CACEnB,WAAY,UACZQ,SAAU,oBACVD,KAAM,kDACNY,KAAM","file":"component---src-pages-contact-tsx-72410c9741d98330ec7c.js","sourcesContent":["import styled, { StyledComponent } from 'styled-components'\n\nexport const Relative: StyledComponent<'div', any, {}, never> = styled.div`\n  position: relative;\n`\n","import styled, {\n  StyledComponent,\n  css,\n  FlattenSimpleInterpolation,\n} from 'styled-components'\nimport { ColorProperty, BackgroundColorProperty } from 'csstype'\n\nimport { theme } from '../data/theme'\n\ninterface IClippedBtnProps {\n  color?: ColorProperty\n  background?: BackgroundColorProperty\n}\n\nexport const ClippedBtn: StyledComponent<\n  'div',\n  any,\n  IClippedBtnProps,\n  never\n> = styled.div`\n  height: 100%;\n  background: transparent;\n  border-radius: 0.25rem;\n  transition: color 0.1s ease-in 0.1s;\n\n  @media ${theme.breakpoints.max.tablet} {\n    clip-path: circle(16em at 50% 50%);\n\n    ${({\n      color = 'white',\n      background = 'grey',\n    }: IClippedBtnProps): FlattenSimpleInterpolation => css`\n      color: ${color};\n      background: ${background};\n    `}\n  }\n\n  @media ${theme.breakpoints.min.desktop} {\n    clip-path: circle(1em at 50% 50%);\n    transition: all 0.25s ease-in-out;\n    font-size: 2rem;\n    color: transparent;\n\n    :hover {\n      clip-path: circle(8em at 50% 50%);\n\n      ${({\n        color = 'white',\n        background = 'grey',\n      }: IClippedBtnProps): FlattenSimpleInterpolation => css`\n        color: ${color};\n        background: ${background};\n      `}\n    }\n  }\n`\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { ColorProperty, BackgroundColorProperty } from 'csstype'\n\nimport { StyledA } from '../StyledLink'\nimport { Relative } from '../Relative'\nimport { DynamicIcon } from '../DynamicIcon'\nimport { Absolute } from '../Absolute'\nimport { ClippedBtn } from '../ClippedBtn'\nimport { Flex } from '../Flex'\n\ninterface ISocialButtonsProps {\n  children: ReactNode\n  href: string\n  color?: ColorProperty\n  background?: BackgroundColorProperty\n  iconPath: string\n}\n\nconst StyledSocialIcon: StyledComponent<'div', any, {}, never> = styled.div`\n  margin: 0 auto;\n  max-width: 4rem;\n`\n\nexport function SocialButton({\n  children,\n  color,\n  background,\n  href,\n  iconPath,\n}: ISocialButtonsProps): JSX.Element {\n  return (\n    <StyledA href={href} target=\"blank\">\n      <Relative>\n        <StyledSocialIcon>\n          <DynamicIcon path={iconPath} />\n        </StyledSocialIcon>\n        <Absolute>\n          <ClippedBtn background={background} color={color}>\n            <Flex justifyContent=\"space-around\">\n              <span>{children}</span>\n            </Flex>\n          </ClippedBtn>\n        </Absolute>\n      </Relative>\n    </StyledA>\n  )\n}\n","import React from 'react'\n\nimport { IContact } from '../../data/contacts'\n\nimport { SocialButton } from './SocialButton'\n\nexport interface IContactsProps {\n  contacts: IContact[]\n}\n\nexport function Contacts({ contacts }: IContactsProps): JSX.Element {\n  return (\n    <>\n      {contacts.map(\n        (\n          { background, iconPath, href, text }: IContact,\n          key: number\n        ): JSX.Element => (\n          <SocialButton\n            background={background}\n            iconPath={iconPath}\n            href={href}\n            key={key}\n          >\n            {text}\n          </SocialButton>\n        )\n      )}\n    </>\n  )\n}\n","import React from 'react'\n\nimport { IContact } from '../data/contacts'\n\nimport { SEO } from '../components/compositions/SEO'\nimport { Grid } from '../components/Grid'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Contacts } from '../components/compositions/Contacts'\n\nexport interface IContactLayoutProps {\n  contacts: IContact[]\n}\n\nexport function ContactLayout({ contacts }: IContactLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO\n        title=\"Contact\"\n        // description=\"Get in touch with me through some social links\"\n      />\n      <CenteredBlock>\n        <h1>Get in touch!</h1>\n        <p>\n          I don't do Twitter and I don't really use Facebook other than checking\n          it about twice a year. However, there are other ways to get in touch\n          with me. I don't have a fancy form (yet), but that shouldn't be a\n          dealbreaker. I check my mail at least once a day, LinkedIn weekly and\n          I'm pretty much always available on Discord. You just do whatever\n          feels right ðŸ˜‰.\n        </p>\n        <Grid columns={3} rows={1}>\n          <Contacts contacts={contacts} />\n        </Grid>\n      </CenteredBlock>\n    </>\n  )\n}\n","import React from 'react'\n\nimport { CONTACTS } from '../data/contacts'\n\nimport { Layout } from '../components/Layout'\nimport { ContactLayout } from '../layouts/ContactLayout'\n\nfunction ContactPage(): JSX.Element {\n  return (\n    <Layout>\n      <ContactLayout contacts={CONTACTS} />\n    </Layout>\n  )\n}\n\n// tslint:disable-next-line: no-default-export\nexport default ContactPage\n","import { BackgroundColorProperty } from 'csstype'\n\nexport interface IContact {\n  background: BackgroundColorProperty\n  iconPath: string\n  href: string\n  text: string\n}\n\nexport const CONTACTS: IContact[] = [\n  {\n    background: '#000000',\n    iconPath: 'icons/email.png',\n    href: 'mailto://casimir.db@outlook.com',\n    text: 'Mail',\n  },\n  {\n    background: '#007AB9',\n    iconPath: 'icons/linkedin.png',\n    href: 'https://www.linkedin.com/in/casimir-de-bruijn-309990161/',\n    text: 'LinkedIn',\n  },\n  {\n    background: '#8C9EFF',\n    iconPath: 'icons/discord.png',\n    href: 'https://discordapp.com/users/187303558599671808',\n    text: 'Discord',\n  },\n]\n"],"sourceRoot":""}