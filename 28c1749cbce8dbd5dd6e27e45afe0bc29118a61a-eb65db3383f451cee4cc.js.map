{"version":3,"sources":["webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/DynamicIcon.tsx"],"names":["LayoutMain","styled","main","theme","primary","primaryHover","breakpoints","max","smartphone","StyledLayout","div","background","Layout","children","isLandingPage","DynamicIcon","path","query","render","file","images","edges","find","node","relativePath","fluid","childImageSharp"],"mappings":"6+oMAIaA,EAAsDC,IAAOC,KAAV,6DAAGD,CAAH,mHAMnDE,IAAMC,QAGJD,IAAME,aAIVF,IAAMG,YAAYC,IAAIC,YCLpBC,EAKTR,IAAOS,IAAV,0EAAGT,CAAH,qCAGeE,IAAMQ,YAGf,SAASC,EAAT,GAGuB,IAF5BC,EAE4B,EAF5BA,SAE4B,IAD5BC,qBAC4B,SAC5B,OACE,kBAACL,EAAD,CAAcK,cAAeA,GAC3B,kBAACd,EAAD,KAAaa,M,oJCnBZ,SAASE,EAAT,GAA+D,IAAxCC,EAAwC,EAAxCA,KAO5B,OACE,kBAAC,cAAD,CAEEC,MAAK,aAmBLC,OAAQ,gBA3BVC,EA4BIC,EADM,EACNA,OADM,YA1BU,KADpBD,EAiCMC,EAAOC,MAAMC,MACX,qBAAGC,KAA0CC,eAAiBR,QAlCtEG,EAA+B,MAExBA,GAAQ,kBAAC,IAAD,CAAOM,MAAON,EAAKI,KAAKG,gBAAgBD,SAIvD","file":"28c1749cbce8dbd5dd6e27e45afe0bc29118a61a-eb65db3383f451cee4cc.js","sourcesContent":["import styled, { StyledComponent } from 'styled-components'\n\nimport { theme } from '../data/theme'\n\nexport const LayoutMain: StyledComponent<'main', any, {}, never> = styled.main`\n  margin: 0 auto;\n  padding: 4rem 1rem;\n\n  a {\n    text-decoration: none;\n    color: ${theme.primary};\n\n    &:hover {\n      color: ${theme.primaryHover};\n    }\n  }\n\n  @media ${theme.breakpoints.max.smartphone} {\n    padding: 1rem;\n  }\n`\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\n\nimport { theme } from '../data/theme'\n\nimport { LayoutMain } from './LayoutMain'\n\nexport interface ILayoutProps {\n  children?: ReactNode\n  isLandingPage?: boolean\n}\n\nexport const StyledLayout: StyledComponent<\n  'div',\n  any,\n  ILayoutProps,\n  never\n> = styled.div`\n  min-height: 100vh;\n\n  background: ${theme.background};\n`\n\nexport function Layout({\n  children,\n  isLandingPage = false,\n}: ILayoutProps): JSX.Element {\n  return (\n    <StyledLayout isLandingPage={isLandingPage}>\n      <LayoutMain>{children}</LayoutMain>\n    </StyledLayout>\n  )\n}\n","import React from 'react'\nimport Image from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport { IImageSharpEdge, IImageSharpAllFiles } from '../types/interfaces'\n\nexport interface IDynamicIconProps {\n  path: string\n}\n\nexport function DynamicIcon({ path }: IDynamicIconProps): JSX.Element {\n  function renderImage(\n    file: IImageSharpEdge | null = null\n  ): JSX.Element | null {\n    return file && <Image fluid={file.node.childImageSharp.fluid} />\n  }\n\n  return (\n    <StaticQuery\n      // tslint:disable-next-line: no-void-expression\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 128) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({\n        images,\n      }: {\n        images: IImageSharpAllFiles\n      }): JSX.Element | null =>\n        renderImage(\n          images.edges.find(\n            ({ node }: IImageSharpEdge): boolean => node.relativePath === path\n          ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {â€¦}}\n        )\n      }\n    />\n  )\n}\n"],"sourceRoot":""}