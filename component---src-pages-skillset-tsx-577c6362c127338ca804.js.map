{"version":3,"sources":["webpack:///./src/components/ContentSeparator.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCards.tsx","webpack:///./src/components/compositions/card/Card.tsx","webpack:///./src/components/Heart.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardIndicator.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardBackdrop.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardBody.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardHeader.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCard.tsx","webpack:///./src/components/compositions/card/CardBody.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCardHeader.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCardHeaderText.tsx","webpack:///./src/components/compositions/card/CardHeaderIconWrapper.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCard.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCards.tsx","webpack:///./src/layouts/SkillSetLayout.tsx","webpack:///./src/components/compositions/card/CardFooter.tsx","webpack:///./src/pages/skillset.tsx","webpack:///./src/components/compositions/card/CardHeader.tsx"],"names":["ContentSeparator","styled","div","SkillCards","edges","map","i","frontmatter","node","level","title","description","excerpt","time","key","index","skillColor","Card","article","theme","breakpoints","min","desktop","max","smartphone","StyledHeart","svg","fill","css","Heart","React","forwardRef","props","ref","viewBox","id","d","SkillCardIndicator","litColor","instance","from","scale","opacity","duration","delay","width","height","StyledSkillCardBackdrop","attrs","className","SkillCardBackdrop","children","to","ease","SkillCardBody","Array","isArray","string","url","href","target","text","SkillCardHeader","StyledSkillCard","SkillCard","x","DynamicImage","path","replace","toLocaleLowerCase","CardHeader","Flex","justifyContent","direction","StyledLink","color","CardBody","CardFooter","count","Math","sqrt","main","ExperienceCardHeader","header","ExperienceCardHeaderText","CardHeaderIconWrapper","backgroundColor","ExperienceCard","name","type","icon","dateStart","dateEnd","DynamicIcon","display","DateFormatted","dateString","ExperienceCards","SkillsetLayout","skillsetData","experienceData","SEO","CenteredBlock","Grid","columns","maxWidth","footer","style","SkillsetPage","query","render"],"mappings":"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","file":"component---src-pages-skillset-tsx-577c6362c127338ca804.js","sourcesContent":["import styled, { StyledComponent } from 'styled-components'\n\nexport const ContentSeparator: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding-bottom: 4rem;\n`\n","import React from 'react'\n\nimport {\n  ISkillsetAllMarkdownRemark,\n  ISkillsetEdge,\n} from '../../../../types/interfaces'\n\nimport { SkillCard } from './SkillCard'\n\nexport function SkillCards({ edges }: ISkillsetAllMarkdownRemark): JSX.Element {\n  return (\n    <>\n      {edges.map(\n        ({ node: { frontmatter } }: ISkillsetEdge, i: number): JSX.Element => (\n          <SkillCard\n            level={frontmatter.level || 0}\n            title={frontmatter.title}\n            description={frontmatter.excerpt}\n            time={frontmatter.time}\n            key={i}\n            index={i}\n            skillColor={frontmatter.skillColor}\n          />\n        )\n      )}\n    </>\n  )\n}\n","import styled, { StyledComponent } from 'styled-components'\nimport { theme } from '../../../data/theme'\n\nexport const Card: StyledComponent<'article', any, {}, never> = styled.article`\n  position: relative;\n  height: 100%;\n  border-radius: 0.25rem;\n  display: grid;\n  grid-template-areas: 'header' 'body' 'footer';\n  grid-template-rows: auto 1fr auto;\n  overflow: hidden;\n  background: white;\n  box-shadow: 0 0.075rem 0.075rem rgba(0, 0, 0, 0.1),\n    0 0.125rem 0.125rem rgba(0, 0, 0, 0.25);\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n\n  & header img {\n    transition: all 0.2s ease-in-out !important;\n  }\n\n  @media ${theme.breakpoints.min.desktop} {\n    &:hover {\n      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.25),\n        0 0.25rem 0.25rem rgba(0, 0, 0, 0.2);\n\n      & header img {\n        transform: scale(1.1);\n      }\n    }\n  }\n\n  & h1 {\n    font-size: 1.1em;\n    margin: 0;\n  }\n\n  & h2 {\n    font-size: 1em;\n    font-style: italic;\n    margin: 0;\n    color: #aaa;\n    margin-bottom: 1rem;\n  }\n\n  & p {\n    text-align: justify;\n\n    @media ${theme.breakpoints.max.smartphone} {\n      text-align: left;\n    }\n  }\n`\n","import React from 'react'\nimport styled, {\n  StyledComponent,\n  css,\n  FlattenSimpleInterpolation,\n} from 'styled-components'\nimport { FillProperty } from 'csstype'\n\nimport { AnyExoticRefComponent, AnyExoticRefTargets } from '../types/types'\n\nexport interface IHeartProps {\n  height: string\n  width: string\n  fill: FillProperty\n}\n\nexport const StyledHeart: StyledComponent<\n  'svg',\n  any,\n  IHeartProps,\n  never\n> = styled.svg`\n  ${({ fill }: IHeartProps): FlattenSimpleInterpolation => css`\n    fill: ${fill};\n  `}\n`\n\nexport const Heart: AnyExoticRefComponent<IHeartProps> = React.forwardRef(\n  (props: IHeartProps, ref: AnyExoticRefTargets): JSX.Element => (\n    <StyledHeart {...props} viewBox=\"0 0 315 342\" ref={ref}>\n      <g id=\"heart\">\n        <path d=\"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\" />\n      </g>\n    </StyledHeart>\n  )\n)\n","import React from 'react'\nimport { ColorProperty } from 'csstype'\nimport { Tween } from 'react-gsap'\n\nimport { Heart } from '../../../Heart'\n\ninterface ISkillCardIndicator {\n  litColor: ColorProperty\n  index: number\n  instance: number\n}\n\nexport function SkillCardIndicator({\n  litColor,\n  index,\n  instance,\n}: ISkillCardIndicator): JSX.Element {\n  return (\n    <Tween\n      from={{ scale: 8, opacity: 0 }}\n      duration={0.125}\n      delay={1 + index / 8 + instance * 0.125}\n    >\n      <Heart fill={litColor} width={'1rem'} height={'1rem'} />\n    </Tween>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { Tween } from 'react-gsap'\n\nconst StyledSkillCardBackdrop: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div.attrs({ className: 'backdrop' })`\n  transition: all ease 0.5s;\n  position: absolute;\n  bottom: 1rem;\n  right: 1rem;\n  width: 100%;\n  max-width: 8rem;\n`\n\nexport function SkillCardBackdrop({\n  children,\n  index,\n}: {\n  children: ReactNode\n  index: number\n}): JSX.Element {\n  return (\n    <Tween\n      to={{ opacity: 0.25 }}\n      duration={1}\n      delay={1 + index * 0.125}\n      ease=\"power1\"\n    >\n      <StyledSkillCardBackdrop>{children}</StyledSkillCardBackdrop>\n    </Tween>\n  )\n}\n","import React from 'react'\nimport { Timeline, Tween } from 'react-gsap'\n\nimport {\n  StringOrUrlArray,\n  StringOrUrlObject,\n} from '../../../../types/StringOrUrlObject'\n\nimport { StyledA } from '../../../StyledLink'\n\ninterface ISkillCardBodyProps {\n  description: StringOrUrlArray\n  index: number\n}\nexport function SkillCardBody({\n  description,\n  index,\n}: ISkillCardBodyProps): JSX.Element {\n  return (\n    <Timeline>\n      <Tween\n        from={{ opacity: 0 }}\n        duration={1}\n        delay={1 + index * 0.125}\n        ease=\"power1\"\n      >\n        <p>\n          {Array.isArray(description)\n            ? description.map((string: StringOrUrlObject, i: number):\n                | JSX.Element\n                | string => {\n                if (typeof string !== 'string' && string.url !== '') {\n                  return (\n                    <StyledA href={string.url} target=\"blank\" key={i}>\n                      {string.text}\n                    </StyledA>\n                  )\n                }\n\n                return string as string\n              })\n            : description}\n        </p>\n      </Tween>\n    </Timeline>\n  )\n}\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const SkillCardHeader: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding: 2rem 2rem 0 2rem;\n\n  h1 {\n    font-size: 1rem;\n    font-weight: 100;\n    text-align: right;\n    align-self: normal;\n  }\n  h2 {\n    font-size: 0.8rem;\n    font-weight: 100;\n  }\n`\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { Tween } from 'react-gsap'\nimport { ColorProperty } from 'csstype'\n\nimport { StringOrUrlArray } from '../../../../types/StringOrUrlObject'\n\nimport { SkillCardIndicator } from './SkillCardIndicator'\nimport { SkillCardBackdrop } from './SkillCardBackdrop'\nimport { SkillCardBody } from './SkillCardBody'\nimport { SkillCardHeader } from './SkillCardHeader'\nimport { CardFooter } from '../CardFooter'\nimport { CardHeader } from '../CardHeader'\nimport { CardBody } from '../CardBody'\nimport { Flex } from '../../../Flex'\nimport { DynamicImage } from '../../../DynamicImage'\nimport { StyledLink } from '../../../StyledLink'\nimport { Card } from '../Card'\n\ninterface ISkillCardProps {\n  index: number\n  children?: ReactNode\n  level: number\n  title: string\n  description: StringOrUrlArray\n  skillColor: ColorProperty\n  time?: number\n}\n\nconst StyledSkillCard: StyledComponent<typeof Card, any, {}, never> = styled(\n  Card\n)`\n  &:hover {\n    .backdrop {\n      opacity: 0.75 !important;\n    }\n  }\n`\n\nexport function SkillCard({\n  index,\n  title,\n  description,\n  skillColor,\n  time = 0,\n}: ISkillCardProps): JSX.Element {\n  return (\n    <Tween\n      from={{ x: '-400px', opacity: 0 }}\n      duration={1}\n      delay={0.25 + index * 0.125}\n      ease=\"elastic\"\n    >\n      <StyledSkillCard>\n        <SkillCardBackdrop index={index}>\n          <DynamicImage\n            path={`code_icons/${title\n              .replace(/\\([0-9]*\\)|\\s+/gi, '')\n              .toLocaleLowerCase()}.png`}\n          />\n        </SkillCardBackdrop>\n        <CardHeader>\n          <SkillCardHeader>\n            <Flex justifyContent=\"space-between\" direction=\"row\">\n              <SkillCardIndicator\n                instance={index}\n                index={0}\n                litColor={skillColor}\n              ></SkillCardIndicator>\n              <h1>\n                <StyledLink\n                  to={`/tag/${title.toLocaleLowerCase().replace(/\\s+/gi, '_')}`}\n                  color={skillColor}\n                >\n                  {title}\n                </StyledLink>\n              </h1>\n            </Flex>\n          </SkillCardHeader>\n        </CardHeader>\n        <CardBody>\n          <SkillCardBody description={description} index={index} />\n        </CardBody>\n        <CardFooter>\n          <p>\n            (time spent:{' '}\n            <Tween\n              to={{ count: time }}\n              ease=\"none\"\n              duration={Math.sqrt(Math.sqrt(time)) * 0.5}\n            >\n              <span>0</span>\n            </Tween>{' '}\n            hours)\n          </p>\n        </CardFooter>\n      </StyledSkillCard>\n    </Tween>\n  )\n}\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const CardBody: StyledComponent<'main', any, {}, never> = styled.main`\n  position: relative;\n  padding: 2em;\n  grid-area: 'body';\n`\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const ExperienceCardHeader: StyledComponent<\n  'header',\n  any,\n  {},\n  never\n> = styled.header`\n  padding: 2em 2em 0em 2em;\n\n  h2 {\n    margin: 0;\n  }\n`\n","import styled, { StyledComponent } from 'styled-components'\n\nimport { theme } from '../../../../data/theme'\n\nexport const ExperienceCardHeaderText: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding: 0 2em;\n\n  ${theme.breakpoints.max.smartphone} {\n    padding: 0 0 0 1em;\n  }\n`\n","import styled, {\n  StyledComponent,\n  css,\n  FlattenSimpleInterpolation,\n} from 'styled-components'\nimport { BackgroundColorProperty } from 'csstype'\n\ninterface ICardHeaderIconWrapperProps {\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const CardHeaderIconWrapper: StyledComponent<\n  'div',\n  any,\n  ICardHeaderIconWrapperProps,\n  never\n> = styled.div`\n  border-radius: 999px;\n  overflow: hidden;\n  width: 4em;\n  padding: 0.5em;\n\n  ${({\n    backgroundColor = '#DDD',\n  }: ICardHeaderIconWrapperProps): FlattenSimpleInterpolation => css`\n    background: ${backgroundColor};\n  `}\n`\n","import React from 'react'\nimport { BackgroundColorProperty } from 'csstype'\nimport { Reveal, Tween } from 'react-gsap'\n\nimport { Card } from '../Card'\nimport { Flex } from '../../../Flex'\nimport { DynamicIcon } from '../../../DynamicIcon'\nimport { DateFormatted } from '../../../DateFormatted'\nimport { ExperienceCardHeader } from './ExperienceCardHeader'\nimport { ExperienceCardHeaderText } from './ExperienceCardHeaderText'\nimport { CardBody } from '../CardBody'\nimport { CardHeaderIconWrapper } from '../CardHeaderIconWrapper'\n\ninterface IExperienceCardProps {\n  index: number\n  name: string\n  type: string\n  icon: string\n  dateStart: string\n  dateEnd: string\n  description: string\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const ExperienceCard: (props: IExperienceCardProps) => JSX.Element = ({\n  // index,\n  name,\n  type,\n  icon,\n  dateStart,\n  dateEnd,\n  description,\n  backgroundColor,\n}: IExperienceCardProps): JSX.Element => (\n  <Reveal>\n    <Tween\n      from={{ width: '8rem', height: '8rem' }}\n      to={{ width: '100%', height: 'auto' }}\n      duration={0.75}\n      ease={'power4'}\n    >\n      <Card>\n        <ExperienceCardHeader>\n          <Flex justifyContent=\"flex-start\">\n            <CardHeaderIconWrapper backgroundColor={backgroundColor}>\n              <DynamicIcon path={icon} />\n            </CardHeaderIconWrapper>\n            <Tween from={{ display: 'none' }} delay={1}>\n              <ExperienceCardHeaderText>\n                <h1>\n                  {name} ({type})\n                </h1>\n                <h2>\n                  <DateFormatted dateString={dateStart} /> -{' '}\n                  <DateFormatted dateString={dateEnd} />\n                </h2>\n              </ExperienceCardHeaderText>\n            </Tween>\n          </Flex>\n        </ExperienceCardHeader>\n        <CardBody>\n          <Tween from={{ display: 'none' }} delay={1}>\n            <main>\n              <p>{description}</p>\n            </main>\n          </Tween>\n        </CardBody>\n      </Card>\n    </Tween>\n  </Reveal>\n)\n","import React from 'react'\n\nimport {\n  IExperienceEdge,\n  IExperienceAllMarkdownRemark,\n} from '../../../../types/interfaces'\n\nimport { ExperienceCard } from './ExperienceCard'\n\nexport function ExperienceCards({\n  edges,\n}: IExperienceAllMarkdownRemark): JSX.Element {\n  return (\n    <>\n      {edges.map(\n        (\n          { node: { frontmatter } }: IExperienceEdge,\n          i: number\n        ): JSX.Element => (\n          <ExperienceCard\n            name={frontmatter.title}\n            type={frontmatter.type}\n            description={frontmatter.excerpt}\n            icon={`icons/${frontmatter.title.toLocaleLowerCase()}_logo.png`}\n            backgroundColor={frontmatter.backgroundColor}\n            dateStart={frontmatter.dateStart}\n            dateEnd={frontmatter.dateEnd}\n            key={i}\n            index={i}\n          />\n        )\n      )}\n    </>\n  )\n}\n","import React from 'react'\n\nimport {\n  IExperienceAllMarkdownRemark,\n  ISkillsetAllMarkdownRemark,\n} from '../types/interfaces'\n\nimport { SEO } from '../components/compositions/SEO'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Grid } from '../components/Grid'\nimport { ContentSeparator } from '../components/ContentSeparator'\nimport { SkillCards } from '../components/compositions/card/skillcard/SkillCards'\nimport { ExperienceCards } from '../components/compositions/card/experiencecard/ExperienceCards'\nimport { ExperienceCard } from '../components/compositions/card/experiencecard/ExperienceCard'\n\nexport interface ISkillsetLayoutProps {\n  skillsetData: ISkillsetAllMarkdownRemark\n  experienceData: IExperienceAllMarkdownRemark\n}\n\nexport function SkillsetLayout({\n  skillsetData,\n  experienceData,\n}: ISkillsetLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO\n        title=\"Skillset\"\n        description=\"This is my trying to provide you with an indication about my capabilities & goals looking forward\"\n      />\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>This is what I have worked with</h1>\n          <p>\n            A rough estimation of the total time I've spent on everything is\n            included.\n          </p>\n        </ContentSeparator>\n      </CenteredBlock>\n      <ContentSeparator>\n        <Grid columns=\"repeat(auto-fill, minmax(25rem, 1fr))\" maxWidth=\"160rem\">\n          <SkillCards edges={skillsetData.edges} />\n        </Grid>\n      </ContentSeparator>\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>Education</h1>\n          <ExperienceCard\n            name=\"Digital Media & Communication\"\n            type=\"HBO\"\n            icon=\"icons/hu_logo.jpg\"\n            dateStart=\"2015-09-05\"\n            dateEnd=\"2019-02-04\"\n            description=\"This is where my interest in programming started, as well as my first steps into graphic design. I learned about marketing and doing user research. Halfway through my final year I decided to drop out due to lack of motivation as I wanted to pursue learning more about programming.\"\n            backgroundColor=\"#298CCD\"\n            index={0}\n          />\n        </ContentSeparator>\n        <ContentSeparator>\n          <h1>Professional experience</h1>\n          <Grid>\n            <ExperienceCards edges={experienceData.edges} />\n          </Grid>\n        </ContentSeparator>\n      </CenteredBlock>\n    </>\n  )\n}\n","import styled, {\n  StyledComponent,\n  FlattenSimpleInterpolation,\n  css,\n} from 'styled-components'\n\ninterface ICardFooterProps {\n  style?: boolean\n}\n\nexport const CardFooter: StyledComponent<\n  'footer',\n  any,\n  ICardFooterProps,\n  never\n> = styled.footer`\n  ${({ style = false }: ICardFooterProps): FlattenSimpleInterpolation =>\n    style\n      ? css`\n          background: #eee;\n          padding: 2rem;\n          border-top: 1px solid #ddd;\n          grid-area: footer;\n        `\n      : css`\n          padding: 0 2rem 2rem;\n        `}\n`\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport { Layout } from '../components/Layout'\nimport { SkillsetLayout, ISkillsetLayoutProps } from '../layouts/SkillSetLayout'\n\n// tslint:disable-next-line: no-void-expression\nconst PAGE_QUERY: void = graphql`\n  query {\n    experienceData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/experiences/\" } } }\n      sort: { fields: frontmatter___dateEnd }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            dateStart\n            dateEnd\n            backgroundColor\n            type\n          }\n          excerpt\n        }\n      }\n    }\n    skillsetData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/tag/\" } } }\n      sort: { fields: frontmatter___time, order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            level\n            skillColor\n            time\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\nfunction SkillsetPage(): JSX.Element {\n  return (\n    <Layout>\n      <StaticQuery\n        query={PAGE_QUERY}\n        render={(props: ISkillsetLayoutProps): JSX.Element => (\n          <SkillsetLayout {...props} />\n        )}\n      />\n    </Layout>\n  )\n}\n\n// tslint:disable-next-line: no-default-export\nexport default SkillsetPage\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const CardHeader: StyledComponent<\n  'header',\n  any,\n  {},\n  never\n> = styled.header`\n  grid-area: 'header';\n`\n"],"sourceRoot":""}