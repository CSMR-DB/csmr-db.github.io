{"version":3,"sources":["webpack:///./src/components/Fixed.tsx","webpack:///./src/components/blend.tsx","webpack:///./src/components/MenuTile.tsx","webpack:///./src/components/Filter.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/flex.tsx","webpack:///./src/components/dynamicimage.tsx","webpack:///./src/components/StyledLink.tsx"],"names":["FixedElement","styled","div","props","width","height","top","left","Fixed","children","StyledDiv","isolation","mode","hoverMode","Blend","MenuTile","blendMode","imagePath","to","background","title","path","StyledLink","color","Filter","StyledIndexPage","IndexPage","rows","columns","routes","map","route","i","key","size","strokeColor","strokeSize","fill","StyledFlex","justifyContent","Flex","DynamicImage","query","render","images","edges","image","node","relativePath","includes","file","fluid","childImageSharp","Link","StyledA","a"],"mappings":"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","file":"component---src-pages-index-tsx-a42abd4181099e9c7a04.js","sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport {\n  WidthProperty,\n  HeightProperty,\n  TopProperty,\n  LeftProperty,\n} from 'csstype'\n\ninterface IFixedElementProps {\n  children: ReactNode\n  top?: TopProperty<1>\n  left?: LeftProperty<1>\n  width?: WidthProperty<1>\n  height?: HeightProperty<1>\n}\n\nconst FixedElement: StyledComponent<\n  'div',\n  any,\n  IFixedElementProps,\n  never\n> = styled.div`\n  position: fixed;\n  width: ${(props: IFixedElementProps) => props.width || '100%'};\n  height: ${(props: IFixedElementProps) => props.height || '100%'};\n  top: ${(props: IFixedElementProps) => props.top || '0'};\n  left: ${(props: IFixedElementProps) => props.left || '0'};\n`\n\nexport const Fixed = ({\n  children,\n  top,\n  left,\n  width,\n  height,\n}: IFixedElementProps) => (\n  <FixedElement top={top} left={left} width={width} height={height}>\n    {children}\n  </FixedElement>\n)\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { MixBlendModeProperty } from 'csstype'\n\ninterface IBlend {\n  children: ReactNode\n  mode: MixBlendModeProperty\n  hoverMode?: MixBlendModeProperty\n  isolation?: boolean\n}\n\nconst StyledDiv: StyledComponent<'div', any, IBlend, never> = styled.div`\n  position: relative;\n  isolation: ${(props: IBlend) => (props.isolation ? 'isolate' : 'auto')};\n  overflow: hidden; /** to make sure the containing element has no children overlapping parent's sibling elements */\n\n  & > :first-child {\n    position: relative !important;\n  }\n\n  :hover > :first-child {\n    transform: scale(1.1);\n  }\n\n  & > * {\n    mix-blend-mode: ${(props: IBlend) => props.mode};\n    position: absolute !important; /** to work with gatsby-image, adding !important is a required override */\n    width: 100%;\n    height: 100%;\n    top: 0;\n    transition: all 0.25s ease-in-out;\n\n    :hover {\n      mix-blend-mode: ${(props: IBlend) => props.hoverMode || props.mode};\n    }\n  }\n`\n\nconst Blend = ({ children, mode, hoverMode, isolation = false }: IBlend) => (\n  <StyledDiv mode={mode} isolation={isolation} hoverMode={hoverMode}>\n    {children}\n  </StyledDiv>\n)\n\nexport default Blend\n","import React from 'react'\nimport { BackgroundColorProperty, BlendMode } from 'csstype'\nimport Blend from './blend'\nimport DynamicImage from './dynamicimage'\nimport { StyledLink } from './StyledLink'\nimport Flex from './flex'\n\ninterface IMenuTileProps {\n  blendMode: BlendMode\n  imagePath?: string\n  to: string\n  background: BackgroundColorProperty\n  title: string\n}\n\nexport const MenuTile = ({\n  blendMode,\n  imagePath,\n  to,\n  background,\n  title,\n}: IMenuTileProps) => (\n  <Blend mode={blendMode} isolation={true}>\n    {imagePath ? <DynamicImage path={imagePath} /> : null}\n    <StyledLink color=\"white\" to={to}>\n      <Flex background={background}>\n        <h1>{title}</h1>\n      </Flex>\n    </StyledLink>\n  </Blend>\n)\n","import styled from 'styled-components'\n\nexport const Filter = styled.div`\n  filter: blur(0.5em) sepia(0.5) saturate(2) grayscale(0.5);\n  transform: scale(1.2);\n  height: 100%;\n`\n","import React from 'react'\nimport SEO from '../components/seo'\nimport Flex from '../components/flex'\nimport { Grid } from '../components/grid'\nimport { Fixed } from '../components/Fixed'\nimport Logo from '../components/logo'\nimport { routes } from '../data/routes'\nimport { MenuTile } from '../components/MenuTile'\nimport DynamicImage from '../components/dynamicimage'\nimport { Filter } from '../components/Filter'\nimport styled from 'styled-components'\n\nconst StyledIndexPage = styled.div`\n  .gatsby-image-wrapper {\n    height: 100%;\n  }\n`\n\nconst IndexPage = () => (\n  <StyledIndexPage>\n    <SEO title=\"Homepage\" />\n    <Fixed top={'0px'} left={'0px'} height=\"100vh\" width=\"100vw\">\n      <Filter>\n        <DynamicImage path=\"wallpaper/wallpaper.jpg\" />\n      </Filter>\n    </Fixed>\n    <Grid height=\"100vh\" rows={2} columns={2}>\n      {routes.map((route, i) => (\n        <MenuTile\n          key={i}\n          blendMode=\"overlay\"\n          to={route.path}\n          background=\"rgba(66, 66, 66, .2)\"\n          title={route.title}\n        />\n      ))}\n    </Grid>\n    <Fixed\n      top=\"calc(50% - 8em)\"\n      left=\"calc(50% - 8em)\"\n      width=\"16em\"\n      height=\"16em\"\n    >\n      <Flex>\n        <Logo\n          size={192}\n          strokeColor=\"white\"\n          strokeSize={4}\n          fill=\"transparent\"\n        />\n      </Flex>\n    </Fixed>\n  </StyledIndexPage>\n)\n\nexport default IndexPage\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty, JustifyContentProperty } from 'csstype'\n\ninterface IFlexProps {\n  children: ReactNode\n  background?: BackgroundColorProperty\n  justifyContent?: JustifyContentProperty\n}\n\nconst StyledFlex: StyledComponent<'div', any, IFlexProps, never> = styled.div`\n  position: relative;\n  background: ${(props: IFlexProps) => props.background || 'transparent'};\n\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: IFlexProps) =>\n    props.justifyContent || 'space-around'};\n  transition: all 0.25s ease-in-out;\n\n  :hover {\n    background: transparent;\n  }\n\n  * {\n    /* flex-grow: 1; */\n  }\n`\n\nconst Flex = ({ children, background, justifyContent }: IFlexProps) => (\n  <StyledFlex background={background} justifyContent={justifyContent}>\n    {children}\n  </StyledFlex>\n)\n\nexport default Flex\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface IImageEdges {\n  images: {\n    edges: (IFluidImage)[]\n  }\n}\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nfunction renderImage(file: IFluidImage, key: number = 1) {\n  return <Img key={key} fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicImageProps {\n  path: string\n}\n\nconst DynamicImage = function({ path }: IDynamicImageProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 960) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }: IImageEdges) => {\n        // console.log(images)\n\n        return images.edges.map((image: IFluidImage, i: number) =>\n          image.node.relativePath === path ||\n          image.node.relativePath.includes(path)\n            ? renderImage(image, i)\n            : null\n        ) // Refactored so I can get ALL images from a provided folder portion of 'relativePath'\n\n        // return renderImage(\n        //   images.edges.find(\n        //     (image: IFluidImage) => image.node.relativePath.includes(path)\n        //   ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {…}}\n        // )}\n      }}\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicImage\n","import styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { ColorProperty } from 'csstype'\n\ninterface IStyledLinkProps {\n  color?: ColorProperty\n}\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: ${(props: IStyledLinkProps) => props.color || 'rebeccapurple'};\n`\n\nexport const StyledA = styled.a`\n  text-decoration: none;\n  color: ${(props: IStyledLinkProps) => props.color || 'rebeccapurple'};\n`\n"],"sourceRoot":""}