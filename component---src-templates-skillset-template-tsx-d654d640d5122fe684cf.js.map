{"version":3,"sources":["webpack:///./src/templates/SkillsetTemplate.tsx","webpack:///./src/components/ArticleTags.tsx"],"names":["ProjectTemplate","markdownRemark","data","frontmatter","html","featuredImage","tags","fluid","childImageSharp","title","date","excerpt","dangerouslySetInnerHTML","__html","pageQuery","StyledP","styled","p","ArticleTags","map","tag","i","key","to","toLocaleLowerCase","replace","length"],"mappings":"2FAAA,0JAce,SAASA,EAAT,GAEkB,IACvBC,EADuB,EAD/BC,KAEQD,eACAE,EAAuCF,EAAvCE,YAAaC,EAA0BH,EAA1BG,KACbC,EAA8CF,EAA9CE,cAAeC,EAA+BH,EAA/BG,KACjBC,EACJF,GAAiBA,EAAcG,gBAAgBD,MAEjD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,iCACE,gCACE,kBAAC,IAAD,CAAaD,KAAMA,KAmBrB,gCACE,4BAAKH,EAAYM,OACjB,4BAAKN,EAAYO,MAChBH,GAAS,kBAAC,IAAD,CAAKA,MAAOA,IACtB,2BAAIJ,EAAYQ,UAElB,0BAAMC,wBAAyB,CAAEC,OAAQT,QAQ5C,IAAMU,EAAkB,c,sGCzDzBC,E,KAAgDC,EAAOC,EAAV,2EAAGD,CAAH,iCAItCE,EAA8D,SAAC,GAAD,IACzEZ,EADyE,EACzEA,KADyE,OAKzE,kBAACS,EAAD,aACQ,IACLT,GACCA,EAAKa,KAAI,SAACC,EAAaC,GAAd,OACP,0BAAMC,IAAKD,GACT,kBAAC,IAAD,CACEE,GAAE,QAAUH,EAAII,oBAAoBC,QAAQ,OAAQ,MAEnDL,GAEFC,EAAI,EAAIf,EAAKoB,OAAS,KAAO","file":"component---src-templates-skillset-template-tsx-d654d640d5122fe684cf.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Layout } from '../components/layout'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StyledLink } from '../components/StyledLink'\nimport {\n  ISingleItemData,\n  IMarkdownRemark,\n  IExtendedFrontmatter,\n} from './interfaces'\nimport { ArticleTags } from '../components/ArticleTags'\n\n// tslint:disable-next-line: no-default-export\nexport default function ProjectTemplate({\n  data, // this prop will be injected by the GraphQL query below.\n}: ISingleItemData): JSX.Element {\n  const { markdownRemark }: ISingleItemData['data'] = data // data.markdownRemark holds our post data\n  const { frontmatter, html }: IMarkdownRemark = markdownRemark\n  const { featuredImage, tags }: IExtendedFrontmatter = frontmatter\n  const fluid: FluidObject | undefined =\n    featuredImage && featuredImage.childImageSharp.fluid\n\n  return (\n    <Layout>\n      <CenteredBlock>\n        <article>\n          <footer>\n            <ArticleTags tags={tags} />\n            {/* {tags && (\n              <div>\n                <span>Tags: </span>\n                {tags.map((tag: string, i: number) => (\n                  <span key={i}>\n                    <StyledLink\n                      to={`/tag/${tag\n                        .toLocaleLowerCase()\n                        .replace(/\\s/gi, '_')}`}\n                    >\n                      {tag}\n                    </StyledLink>\n                    {i + 1 < tags.length ? ', ' : ''}\n                  </span>\n                ))}\n              </div>\n            )} */}\n          </footer>\n          <header>\n            <h1>{frontmatter.title}</h1>\n            <h6>{frontmatter.date}</h6>\n            {fluid && <Img fluid={fluid}></Img>}\n            <p>{frontmatter.excerpt}</p>\n          </header>\n          <main dangerouslySetInnerHTML={{ __html: html }} />\n        </article>\n      </CenteredBlock>\n    </Layout>\n  )\n}\n\n// tslint:disable-next-line: no-void-expression\nexport const pageQuery: void = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date\n        path\n        title\n        tags\n        excerpt\n        featuredImage {\n          childImageSharp {\n            fluid(maxWidth: 960) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { StyledLink } from './StyledLink'\nimport styled, { StyledComponent } from 'styled-components'\n\nconst StyledP: StyledComponent<'p', any, {}, never> = styled.p`\n  text-align: left !important;\n`\n\nexport const ArticleTags: ({ tags }: { tags?: string[] }) => JSX.Element = ({\n  tags,\n}: {\n  tags?: string[]\n}): JSX.Element => (\n  <StyledP>\n    Tags:{' '}\n    {tags &&\n      tags.map((tag: string, i: number) => (\n        <span key={i}>\n          <StyledLink\n            to={`/tag/${tag.toLocaleLowerCase().replace(/\\s/gi, '_')}`}\n          >\n            {tag}\n          </StyledLink>\n          {i + 1 < tags.length ? ', ' : ''}\n        </span>\n      ))}\n  </StyledP>\n)\n"],"sourceRoot":""}