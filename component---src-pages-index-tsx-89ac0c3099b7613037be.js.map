{"version":3,"sources":["webpack:///./src/components/Fixed.tsx","webpack:///./src/components/Blend.tsx","webpack:///./src/components/MenuTile.tsx","webpack:///./src/components/Filter.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/Flex.tsx","webpack:///./src/components/Absolute.tsx"],"names":["FixedElement","styled","div","props","width","height","top","left","Fixed","children","StyledDiv","isolation","mode","hoverMode","Blend","StyledMenuTileH1","h1","MenuTile","blendMode","imagePath","to","background","title","DynamicImage","path","StyledLink","color","activeClassName","partiallyActive","Flex","Filter","StyledIndexPage","StyledIndexLogoImageContainer","StyledHomepageLayoutWrapper","StyledHomepageMenuWrapper","StyledHomepageMenuGrid","StyledHomepageImageWrapper","IndexPage","hasFooter","SEO","routes","map","route","i","key","Absolute","Logo","size","strokeColor","strokeSize","fill","MainNav","StyledFlex","justifyContent","AbsoluteCenter"],"mappings":"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","file":"component---src-pages-index-tsx-89ac0c3099b7613037be.js","sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport {\n  WidthProperty,\n  HeightProperty,\n  TopProperty,\n  LeftProperty,\n} from 'csstype'\n\nexport interface IFixedElementProps {\n  children: ReactNode\n  top?: TopProperty<1>\n  left?: LeftProperty<1>\n  width?: WidthProperty<1>\n  height?: HeightProperty<1>\n}\n\nconst FixedElement: StyledComponent<\n  'div',\n  any,\n  IFixedElementProps,\n  never\n> = styled.div`\n  position: fixed;\n  width: ${(props: IFixedElementProps): WidthProperty<1> =>\n    props.width || '100%'};\n  height: ${(props: IFixedElementProps): HeightProperty<1> =>\n    props.height || '100%'};\n  top: ${(props: IFixedElementProps): TopProperty<1> => props.top || '0'};\n  left: ${(props: IFixedElementProps): LeftProperty<1> => props.left || '0'};\n`\n\nexport const Fixed: ({\n  children,\n  top,\n  left,\n  width,\n  height,\n}: IFixedElementProps) => JSX.Element = ({\n  children,\n  top,\n  left,\n  width,\n  height,\n}: IFixedElementProps): JSX.Element => (\n  <FixedElement top={top} left={left} width={width} height={height}>\n    {children}\n  </FixedElement>\n)\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { MixBlendModeProperty, IsolationProperty } from 'csstype'\n\ninterface IBlend {\n  children: ReactNode\n  mode: MixBlendModeProperty\n  hoverMode?: MixBlendModeProperty\n  isolation?: boolean\n}\n\nconst StyledDiv: StyledComponent<'div', any, IBlend, never> = styled.div`\n  position: relative;\n  isolation: ${(props: IBlend): IsolationProperty =>\n    props.isolation ? 'isolate' : 'auto'};\n  overflow: hidden; /** to make sure the containing element has no children overlapping parent's sibling elements */\n\n  & > :first-child {\n    position: relative !important;\n  }\n\n  :hover > :first-child {\n    transform: scale(1.1);\n  }\n\n  & > * {\n    mix-blend-mode: ${(props: IBlend): MixBlendModeProperty => props.mode};\n    position: absolute !important; /** to work with gatsby-image, adding !important is a necessary override */\n    width: 100%;\n    height: 100%;\n    top: 0;\n    transition: all 0.25s ease-in-out;\n\n    :hover {\n      mix-blend-mode: ${(props: IBlend): MixBlendModeProperty =>\n        props.hoverMode || props.mode};\n    }\n  }\n`\n\nexport const Blend: ({\n  children,\n  mode,\n  hoverMode,\n  isolation,\n}: IBlend) => JSX.Element = ({\n  children,\n  mode,\n  hoverMode,\n  isolation = false,\n}: IBlend): JSX.Element => (\n  <StyledDiv mode={mode} isolation={isolation} hoverMode={hoverMode}>\n    {children}\n  </StyledDiv>\n)\n","import React from 'react'\nimport { BackgroundColorProperty, BlendMode } from 'csstype'\nimport { Blend } from './Blend'\nimport { DynamicImage } from './DynamicImage'\nimport { StyledLink } from './StyledLink'\nimport { Flex } from './Flex'\nimport styled, { StyledComponent } from 'styled-components'\n\ninterface IMenuTileProps {\n  blendMode: BlendMode\n  imagePath?: string\n  to: string\n  background: BackgroundColorProperty\n  title: string\n}\n\nconst StyledMenuTileH1: StyledComponent<'h1', any, {}, never> = styled.h1`\n  margin: 0;\n  padding: 0.5em;\n`\n\nexport const MenuTile: ({\n  blendMode,\n  imagePath,\n  to,\n  background,\n  title,\n}: IMenuTileProps) => JSX.Element = ({\n  blendMode,\n  imagePath,\n  to,\n  background,\n  title,\n}: IMenuTileProps): JSX.Element => (\n  <Blend mode={blendMode} isolation={true}>\n    {imagePath ? <DynamicImage path={imagePath} /> : null}\n    <StyledLink color=\"white\" to={to} activeClassName=\"active\" partiallyActive>\n      <Flex background={background}>\n        <StyledMenuTileH1>{title}</StyledMenuTileH1>\n      </Flex>\n    </StyledLink>\n  </Blend>\n)\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const Filter: StyledComponent<'div', any, {}, never> = styled.div`\n  filter: sepia(0.5) saturate(2) grayscale(0.75);\n  transform: scale(1.2);\n  height: 100%;\n`\n","import React from 'react'\nimport { SEO } from '../components/SEO'\nimport { Flex } from '../components/Flex'\nimport { Fixed } from '../components/Fixed'\nimport { Logo } from '../components/Logo'\nimport { routes, IRouteObject } from '../data/routes'\nimport { MenuTile } from '../components/MenuTile'\nimport { DynamicImage } from '../components/DynamicImage'\nimport { Filter } from '../components/Filter'\nimport styled, { StyledComponent } from 'styled-components'\nimport { AbsoluteCenter } from '../components/Absolute'\nimport { MainNav } from '../components/MainNav'\nimport { StyledLayout } from '../components/Layout'\n\nconst StyledIndexPage: StyledComponent<'div', any, {}, never> = styled.div`\n  .gatsby-image-wrapper {\n    height: 100%;\n  }\n`\n\nconst StyledIndexLogoImageContainer: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  border-radius: 999rem;\n  overflow: hidden;\n`\n\nconst StyledHomepageLayoutWrapper: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  @media screen and (max-width: 600px) {\n    display: grid;\n    grid-template-rows: 999fr 1fr;\n    height: 100vh;\n  }\n`\n\nconst StyledHomepageMenuWrapper: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  max-height: 100vh;\n\n  @media screen and (max-width: 600px) {\n    position: relative;\n    order: 2;\n  }\n`\n\nconst StyledHomepageMenuGrid: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  @media screen and (min-width: 600px) {\n    display: grid;\n    height: 100vh;\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-rows: repeat(2, 1fr);\n    grid-gap: 1em;\n  }\n\n  display: none;\n`\n\nconst StyledHomepageImageWrapper: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  position: fixed;\n  top: calc(50% - 8em);\n  left: calc(50% - 8em);\n  width: 16em;\n  height: 16em;\n\n  @media screen and (max-width: 600px) {\n    position: relative;\n    order: 1;\n    padding: 4em;\n  }\n`\n\nconst IndexPage: () => JSX.Element = (): JSX.Element => (\n  <StyledIndexPage>\n    <StyledLayout hasFooter={false}>\n      <SEO title=\"Homepage\" />\n      <Fixed top={'0px'} left={'0px'} height=\"100vh\" width=\"100vw\">\n        <Filter>\n          <DynamicImage path=\"wallpaper/code.jpg\" />\n        </Filter>\n      </Fixed>\n      <StyledHomepageLayoutWrapper>\n        <StyledHomepageMenuWrapper>\n          <StyledHomepageMenuGrid>\n            {routes.map((route: IRouteObject, i: number) => (\n              <MenuTile\n                key={i}\n                blendMode=\"overlay\"\n                to={route.path}\n                background=\"rgba(66, 66, 66, .2)\"\n                title={route.title}\n              />\n            ))}\n          </StyledHomepageMenuGrid>\n        </StyledHomepageMenuWrapper>\n        <StyledHomepageImageWrapper>\n          <Flex>\n            <AbsoluteCenter>\n              <StyledIndexLogoImageContainer>\n                <DynamicImage path=\"wallpaper/me.jpg\" />\n              </StyledIndexLogoImageContainer>\n            </AbsoluteCenter>\n            <Logo\n              size={128}\n              strokeColor=\"white\"\n              strokeSize={4}\n              fill=\"transparent\"\n            />\n          </Flex>\n        </StyledHomepageImageWrapper>\n      </StyledHomepageLayoutWrapper>\n      <MainNav />\n    </StyledLayout>\n  </StyledIndexPage>\n)\n\n// tslint:disable-next-line: no-default-export\nexport default IndexPage\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty, JustifyContentProperty } from 'csstype'\n\nexport interface IFlexProps {\n  children: ReactNode\n  background?: BackgroundColorProperty\n  justifyContent?: JustifyContentProperty\n}\n\nconst StyledFlex: StyledComponent<'div', any, IFlexProps, never> = styled.div`\n  position: relative;\n  background: ${(props: IFlexProps): BackgroundColorProperty =>\n    props.background || 'transparent'};\n\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: IFlexProps): JustifyContentProperty =>\n    props.justifyContent || 'space-around'};\n  transition: all 0.25s ease-in-out;\n\n  :hover {\n    background: transparent;\n  }\n`\n\nexport const Flex: ({\n  children,\n  background,\n  justifyContent,\n}: IFlexProps) => JSX.Element = ({\n  children,\n  background,\n  justifyContent,\n}: IFlexProps): JSX.Element => (\n  <StyledFlex background={background} justifyContent={justifyContent}>\n    {children}\n  </StyledFlex>\n)\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const AbsoluteCenter: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n`\n"],"sourceRoot":""}