{"version":3,"sources":["webpack:///./src/layouts/SkillSetLayout.tsx","webpack:///./src/pages/skillset.tsx"],"names":["SkillsetLayout","skillsetData","experienceData","title","description","columns","maxWidth","edges","map","i","frontmatter","node","level","excerpt","time","key","index","skillColor","to","name","type","icon","dateStart","dateEnd","backgroundColor","toLocaleLowerCase","SkillsetPage","query","render"],"mappings":"o/QAAA,+IAoBO,SAASA,EAAT,GAG+B,IAFpCC,EAEoC,EAFpCA,aACAC,EACoC,EADpCA,eAEA,OACE,oCACE,kBAAC,IAAD,CACEC,MAAM,WACNC,YAAY,sGAEd,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,0DACA,4XAUJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,QAAQ,wCAAwCC,SAAS,UAC5DL,EAAaM,MAAMC,KAClB,WAEEC,GAFF,IACYC,EADZ,EACIC,KAAQD,YADZ,OAIE,kBAAC,IAAD,CACEE,MAAOF,EAAYE,OAAS,EAC5BT,MAAOO,EAAYP,MACnBC,YAAaM,EAAYG,QACzBC,KAAMJ,EAAYI,KAClBC,IAAKN,EACLO,MAAOP,EACPQ,WAAYP,EAAYO,kBAMlC,kBAAC,IAAD,KACE,mnBAWA,2DACgC,IAC9B,kBAAC,IAAD,CAAYC,GAAG,UAAf,oBAFF,yEAMF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,yCACA,kBAAC,IAAD,CACEC,KAAK,gCACLC,KAAK,MACLC,KAAK,oBACLC,UAAU,aACVC,QAAQ,aACRnB,YAAY,2RACZoB,gBAAgB,UAChBR,MAAO,KAGX,kBAAC,IAAD,KACE,uDACA,kBAAC,IAAD,KACGd,EAAeK,MAAMC,KACpB,WAEEC,GAFF,IACYC,EADZ,EACIC,KAAQD,YADZ,OAIE,kBAAC,IAAD,CACES,KAAMT,EAAYP,MAClBiB,KAAMV,EAAYU,KAClBhB,YAAaM,EAAYG,QACzBQ,KAAI,SAAWX,EAAYP,MAAMsB,oBAA7B,YACJD,gBAAiBd,EAAYc,gBAC7BF,UAAWZ,EAAYY,UACvBC,QAASb,EAAYa,QACrBR,IAAKN,EACLO,MAAOP,a,kHC9CViB,UAlByB,kBACtC,kBAAC,IAAD,KACE,kBAAC,cAAD,CACEC,MA7CmB,aA8CnBC,OAAQ,gBACN1B,EADM,EACNA,eACAD,EAFM,EAENA,aAFM,OAIN,kBAAC,IAAD,CACEA,aAAcA,EACdC,eAAgBA,KARtB","file":"component---src-pages-skillset-tsx-ac86ba5070b51bc746b4.js","sourcesContent":["import React from 'react'\nimport { SEO } from '../components/SEO'\nimport { SkillCard } from '../components/SkillCard'\nimport { ExperienceCard } from '../components/ExperienceCard'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Grid } from '../components/Grid'\nimport { StyledLink } from '../components/StyledLink'\nimport {\n  IExperienceAllMarkdownRemark,\n  IExperienceEdge,\n  ISkillsetAllMarkdownRemark,\n  ISkillsetEdge,\n} from '../templates/interfaces'\nimport { ContentSeparator } from '../components/ContentSeparator'\n\nexport interface ISkillsetLayoutProps {\n  skillsetData: ISkillsetAllMarkdownRemark\n  experienceData: IExperienceAllMarkdownRemark\n}\n\nexport function SkillsetLayout({\n  skillsetData,\n  experienceData,\n}: ISkillsetLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO\n        title=\"Skillset\"\n        description=\"This is my trying to provide you with an indication about my capabilities & goals looking forward\"\n      />\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>So, you want to know more?</h1>\n          <p>\n            From my experience so far, programming is about 20% actually writing\n            code and 80% \"looking stuff up\", gathering requirements, defining\n            test scenarios. Obviously, this can vary on a daily basis. But when\n            it comes to actually creating, how do I think I'd score? The time\n            spent is a rough estimate and should be seen as a total of the 20 /\n            80 split.\n          </p>\n        </ContentSeparator>\n      </CenteredBlock>\n      <ContentSeparator>\n        <Grid columns=\"repeat(auto-fill, minmax(25rem, 1fr))\" maxWidth=\"160rem\">\n          {skillsetData.edges.map(\n            (\n              { node: { frontmatter } }: ISkillsetEdge,\n              i: number\n            ): JSX.Element => (\n              <SkillCard\n                level={frontmatter.level || 0}\n                title={frontmatter.title}\n                description={frontmatter.excerpt}\n                time={frontmatter.time}\n                key={i}\n                index={i}\n                skillColor={frontmatter.skillColor}\n              />\n            )\n          )}\n        </Grid>\n      </ContentSeparator>\n      <CenteredBlock>\n        <p>\n          I would like to point out that these scores are more \"relative\" to\n          each other than \"absolute\". Whatever the subject, there's still a lot\n          to learn. I also know that whatever problem I may face dealing with\n          code, eventually a solution will come. I also know that becoming an\n          expert in any field takes at least 10.000 hours of practise. More\n          often than not, I'll be browsing Medium to look for new blogposts\n          regarding JS. Always trying to improve. Most importantly investing\n          more time in JavaScript / TypeScript than any specific framework, so\n          that it'll be easier to pick up whatever comes next.\n        </p>\n        <p>\n          But, as I also mention in the{' '}\n          <StyledLink to=\"/about\">about me section</StyledLink>, I have some\n          experience with other programs outside of programming.\n        </p>\n      </CenteredBlock>\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>Education</h1>\n          <ExperienceCard\n            name=\"Digital Media & Communication\"\n            type=\"HBO\"\n            icon=\"icons/hu_logo.jpg\"\n            dateStart=\"2015-09-05\"\n            dateEnd=\"2019-02-04\"\n            description=\"This is where my interest in programming started, as well as my first steps into graphic design. I learned about marketing and doing user research. Halfway through my final year I decided to drop out due to lack of motivation as I wanted to pursue learning more about programming.\"\n            backgroundColor=\"#298CCD\"\n            index={0}\n          />\n        </ContentSeparator>\n        <ContentSeparator>\n          <h1>Professional experience</h1>\n          <Grid>\n            {experienceData.edges.map(\n              (\n                { node: { frontmatter } }: IExperienceEdge,\n                i: number\n              ): JSX.Element => (\n                <ExperienceCard\n                  name={frontmatter.title}\n                  type={frontmatter.type}\n                  description={frontmatter.excerpt}\n                  icon={`icons/${frontmatter.title.toLocaleLowerCase()}_logo.png`}\n                  backgroundColor={frontmatter.backgroundColor}\n                  dateStart={frontmatter.dateStart}\n                  dateEnd={frontmatter.dateEnd}\n                  key={i}\n                  index={i}\n                />\n              )\n            )}\n          </Grid>\n        </ContentSeparator>\n      </CenteredBlock>\n    </>\n  )\n}\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport { Layout } from '../components/Layout'\nimport { SkillsetLayout, ISkillsetLayoutProps } from '../layouts/SkillSetLayout'\n\n// tslint:disable-next-line: no-void-expression\nconst PAGE_QUERY: void = graphql`\n  query {\n    experienceData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/experiences/\" } } }\n      sort: { fields: frontmatter___dateEnd }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            dateStart\n            dateEnd\n            backgroundColor\n            type\n          }\n          excerpt\n        }\n      }\n    }\n    skillsetData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/tag/\" } } }\n      sort: { fields: frontmatter___time, order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            level\n            skillColor\n            time\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\nconst SkillsetPage: () => JSX.Element = (): JSX.Element => (\n  <Layout>\n    <StaticQuery\n      query={PAGE_QUERY}\n      render={({\n        experienceData,\n        skillsetData,\n      }: ISkillsetLayoutProps): JSX.Element => (\n        <SkillsetLayout\n          skillsetData={skillsetData}\n          experienceData={experienceData}\n        />\n      )}\n    />\n  </Layout>\n)\n\n// tslint:disable-next-line: no-default-export\nexport default SkillsetPage\n"],"sourceRoot":""}