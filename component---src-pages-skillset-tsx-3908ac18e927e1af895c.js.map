{"version":3,"sources":["webpack:///./src/components/SkillCard.tsx","webpack:///./src/components/ExperienceCard.tsx","webpack:///./src/data/skills.ts","webpack:///./src/pages/skillset.tsx","webpack:///./src/components/flex.tsx","webpack:///./src/components/Card.tsx","webpack:///./src/components/DynamicIcon.tsx","webpack:///./node_modules/core-js/modules/es6.array.find.js"],"names":["StyledIndicator","styled","span","props","lit","StyledIndicatorGrid","div","StyledSkillCardHeader","header","SkillCardBackdrop","SkillCard","level","title","description","time","Card","path","replace","toLocaleLowerCase","justifyContent","Array","isArray","map","string","url","href","target","text","ExperienceCard","name","type","icon","dateRange","backgroundColor","DynamicIcon","skills","programming","graphics","ContentSeparator","SkillsetPage","CenteredBlock","columns","maxWidth","code","i","key","StyledLink","to","graphic","StyledFlex","background","Flex","children","article","CardHeader","CardHeaderText","CardHeaderIconWrapper","CardBody","main","CardFooter","footer","StyledDynamicIcon","Img","query","render","file","images","edges","find","image","node","relativePath","fluid","childImageSharp","$export","$find","forced","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"0LAoBMA,EAAkBC,IAAOC,KAAV,6EAAGD,CAAH,wHAOL,SAACE,GAAD,OACZA,EAAMC,IAAM,UAAY,eAGtBC,EAAsBJ,IAAOK,IAAV,iFAAGL,CAAH,wBAInBM,EAAwBN,IAAOO,OAAV,mFAAGP,CAAH,iHAarBQ,EAAoBR,IAAOK,IAAV,+EAAGL,CAAH,+FASVS,EAAY,SAAC,GAAD,IAEvBC,EAFuB,EAEvBA,MACAC,EAHuB,EAGvBA,MACAC,EAJuB,EAIvBA,YACAC,EALuB,EAKvBA,KALuB,OAOvB,kBAACC,EAAA,EAAD,KACE,kBAACN,EAAD,KACE,kBAAC,IAAD,CACEO,KAAI,cAAgBJ,EACjBK,QAAQ,eAAgB,IACxBC,oBAFC,UAKR,kBAACH,EAAA,EAAD,KACE,kBAACR,EAAD,KACE,kBAAC,IAAD,CAAMY,eAAe,iBACnB,kBAACd,EAAD,KACE,kBAACL,EAAD,CAAiBI,IAAKO,GAAS,IAC/B,kBAACX,EAAD,CAAiBI,IAAKO,GAAS,IAC/B,kBAACX,EAAD,CAAiBI,IAAKO,GAAS,IAC/B,kBAACX,EAAD,CAAiBI,IAAKO,GAAS,IAC/B,kBAACX,EAAD,CAAiBI,IAAe,IAAVO,KAExB,4BAAKC,IAEP,6CAAmBE,EAAnB,YAGF,2BACGM,MAAMC,QAAQR,GACXA,EAAYS,KAAI,SAAAC,GACd,MAAsB,iBAAXA,GAAuBA,EAAOC,IAErC,kBAAC,IAAD,CAASC,KAAMF,EAAOC,IAAKE,OAAO,SAC/BH,EAAOI,MAIPJ,KAETV,M,iBC9ECe,EAAiB,SAAC,GAAD,IAC5BC,EAD4B,EAC5BA,KACAC,EAF4B,EAE5BA,KACAC,EAH4B,EAG5BA,KACAC,EAJ4B,EAI5BA,UACAnB,EAL4B,EAK5BA,YACAoB,EAN4B,EAM5BA,gBAN4B,OAQ5B,kBAAClB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMI,eAAe,cACnB,kBAACJ,EAAA,EAAD,CAAuBkB,gBAAiBA,GACtC,kBAACC,EAAA,EAAD,CAAalB,KAAMe,KAErB,kBAAChB,EAAA,EAAD,KACE,4BACGc,EADH,KACWC,EADX,KAGA,4BAAKE,MAIX,8BACE,2BAAInB,O,kBCtCCsB,EAAsC,CACjDC,YAAa,CACX,CACExB,MAAO,UACPD,MAAO,EACPE,YACE,qVACFC,KAAM,KAER,CACEF,MAAO,SACPD,MAAO,EACPE,YACE,uhBACFC,KAAM,KAER,CACEF,MAAO,aACPD,MAAO,EACPE,YACE,2aACFC,KAAM,KAER,CACEF,MAAO,aACPD,MAAO,EACPE,YAAa,CACX,kNACA,CACEW,IACE,yEACFG,KAAM,+DAER,2BACA,CACEH,IACE,6GACFG,KAAM,oBAER,MAEFb,KAAM,KAER,CACEF,MAAO,UACPD,MAAO,EACPE,YACE,odACFC,KAAM,KAER,CACEF,MAAO,QACPD,MAAO,EACPE,YACE,uUACFC,KAAM,KAER,CACEF,MAAO,UACPD,MAAO,EACPE,YACE,sOACFC,KAAM,KAER,CACEF,MAAO,MACPD,MAAO,EACPE,YAAa,CACX,oHACA,CACEW,IAAK,qCACLG,KAAM,2BAER,iCAEFb,KAAM,KAER,CACEF,MAAO,UACPD,MAAO,EACPE,YACE,6SACFC,KAAM,KAER,CACEF,MAAO,OACPD,MAAO,EACPE,YACE,8KACFC,KAAM,KAER,CACEF,MAAO,MACPD,MAAO,EACPE,YACE,4gBACFC,KAAM,KAGVuB,SAAU,CACR,CACEzB,MAAO,oBACPD,MAAO,EACPE,YACE,wLACFC,KAAM,KAER,CACEF,MAAO,sBACPD,MAAO,EACPE,YACE,mPACFC,KAAM,KAER,CACEF,MAAO,iBACPD,MAAO,EACPE,YACE,6WACFC,KAAM,OCnHNwB,EAAmBrC,IAAOK,IAAV,iFAAGL,CAAH,0BA+FPsC,UA3FM,kBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK3B,MAAM,2BACX,kBAAC4B,EAAA,EAAD,KACE,kBAACF,EAAD,KACE,yCACA,kBAAC,EAAD,CACET,KAAK,gCACLC,KAAK,MACLC,KAAK,oBACLC,UAAU,sBACVnB,YAAY,2RACZoB,gBAAgB,aAGpB,kBAACK,EAAD,KACE,uDACA,kBAAC,EAAD,CACET,KAAK,aACLC,KAAK,aACLC,KAAK,4BACLC,UAAU,sBACVnB,YAAY,igBAQZoB,gBAAgB,aAGpB,kBAACK,EAAD,KACE,0DACA,4XAUJ,kBAACA,EAAD,KACE,kBAAC,IAAD,CAAMG,QAAQ,wCAAwCC,SAAS,UAC5DP,EAAOC,YAAYd,KAAI,SAACqB,EAAMC,GAAP,OACtB,kBAAC,EAAD,CACEjC,MAAOgC,EAAKhC,MACZC,MAAO+B,EAAK/B,MACZC,YAAa8B,EAAK9B,YAClBC,KAAM6B,EAAK7B,KACX+B,IAAKD,SAKb,kBAACN,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,mnBAWA,2DACgC,IAC9B,kBAACM,EAAA,EAAD,CAAYC,GAAG,UAAf,oBAFF,0EAOJ,kBAAC,IAAD,CAAMN,QAAQ,wCAAwCC,SAAS,UAC5DP,EAAOE,SAASf,KAAI,SAAC0B,EAASJ,GAAV,OACnB,kBAAC,EAAD,CACEjC,MAAOqC,EAAQrC,MACfC,MAAOoC,EAAQpC,MACfC,YAAamC,EAAQnC,YACrBC,KAAMkC,EAAQlC,c,iCCnGxB,oBAUMmC,EAVN,KAUmEhD,EAAOK,IAAV,uEAAGL,CAAH,uKAEhD,SAACE,GAAD,OAAuBA,EAAM+C,YAAc,iBAKtC,SAAC/C,GAAD,OACjBA,EAAMgB,gBAAkB,kBAcbgC,IANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUF,EAAb,EAAaA,WAAY/B,EAAzB,EAAyBA,eAAzB,OACX,kBAAC8B,EAAD,CAAYC,WAAYA,EAAY/B,eAAgBA,GACjDiC,K,iCC5BL,uNAGarC,EAAOd,IAAOoD,QAAV,2DAAGpD,CAAH,olBA4CJqD,EAAarD,IAAOO,OAAV,uEAAGP,CAAH,4EAOVsD,EAAiBtD,IAAOK,IAAV,2EAAGL,CAAH,uBAQduD,EAKTvD,IAAOK,IAAV,kFAAGL,CAAH,2HAOe,SAACE,GAAD,OACZA,EAAM8B,iBAAmB,UAIhBwB,EAAWxD,IAAOyD,KAAV,qEAAGzD,CAAH,qDAMR0D,EAAa1D,IAAO2D,OAAV,uEAAG3D,CAAH,yG,sGCtEjB4D,EAAoB5D,YAAO6D,KAAV,qFAAG7D,CAAH,4DAoDRiC,IArCK,YAAsC,IAA3BlB,EAA2B,EAA3BA,KAC7B,OACE,kBAAC,IAAD,CACE+C,MAAK,aAmBLC,OAAQ,gBA9BOC,EA8BJC,EAAH,EAAGA,OAAH,OA9BOD,EAgCXC,EAAOC,MAAMC,MACX,SAACC,GAAD,OAAwBA,EAAMC,KAAKC,eAAiBvD,KAhCvD,kBAAC6C,EAAD,CAAmBW,MAAOP,EAAKK,KAAKG,gBAAgBD,SASzD,W,iCC9BJ,IAAIE,EAAU,EAAQ,GAClBC,EAAQ,EAAQ,GAAR,CAA4B,GAEpCC,GAAS,EADH,QAGC,IAAIxD,MAAM,GAAM,MAAE,WAAcwD,GAAS,KACpDF,EAAQA,EAAQG,EAAIH,EAAQI,EAAIF,EAAQ,QAAS,CAC/CR,KAAM,SAAcW,GAClB,OAAOJ,EAAMK,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,GAAR,CATU,S","file":"component---src-pages-skillset-tsx-3908ac18e927e1af895c.js","sourcesContent":["import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from './Card'\nimport Flex from './flex'\nimport DynamicImage from './dynamicimage'\nimport { StyledA } from './StyledLink'\nimport { StringOrUrlObject } from '../types/StringOrUrlObject'\n\ninterface ISkillCardProps {\n  children?: ReactNode\n  level: number\n  title: string\n  description: StringOrUrlObject\n  time: number\n}\n\ninterface IStyledIndicator {\n  lit: boolean\n}\n\nconst StyledIndicator = styled.span`\n  display: inline-block;\n  margin-right: 0.5rem;\n  padding: 0.25rem;\n  width: 1rem;\n  height: 1rem;\n  border-radius: 1rem;\n  background: ${(props: IStyledIndicator) =>\n    props.lit ? '#ffb74d' : 'lightgrey'};\n`\n\nconst StyledIndicatorGrid = styled.div`\n  margin-right: 1rem;\n`\n\nconst StyledSkillCardHeader = styled.header`\n  h1 {\n    font-size: 1rem;\n    font-weight: 100;\n    text-align: right;\n    align-self: normal;\n  }\n  h2 {\n    font-size: 0.8rem;\n    font-weight: 100;\n  }\n`\n\nconst SkillCardBackdrop = styled.div`\n  position: absolute;\n  bottom: 1rem;\n  right: 1rem;\n  width: 100%;\n  max-width: 8rem;\n  filter: opacity(0.075);\n`\n\nexport const SkillCard = ({\n  // children,\n  level,\n  title,\n  description,\n  time,\n}: ISkillCardProps) => (\n  <Card>\n    <SkillCardBackdrop>\n      <DynamicImage\n        path={`code-icons/${title\n          .replace(/\\([0-9]*\\)/gi, '')\n          .toLocaleLowerCase()}.png`}\n      />\n    </SkillCardBackdrop>\n    <CardBody>\n      <StyledSkillCardHeader>\n        <Flex justifyContent=\"space-between\">\n          <StyledIndicatorGrid>\n            <StyledIndicator lit={level >= 1}></StyledIndicator>\n            <StyledIndicator lit={level >= 2}></StyledIndicator>\n            <StyledIndicator lit={level >= 3}></StyledIndicator>\n            <StyledIndicator lit={level >= 4}></StyledIndicator>\n            <StyledIndicator lit={level === 5}></StyledIndicator>\n          </StyledIndicatorGrid>\n          <h1>{title}</h1>\n        </Flex>\n        <h2>(time spent: ~{time} hours)</h2>\n      </StyledSkillCardHeader>\n\n      <p>\n        {Array.isArray(description)\n          ? description.map(string => {\n              if (typeof string !== 'string' && string.url) {\n                return (\n                  <StyledA href={string.url} target=\"blank\">\n                    {string.text}\n                  </StyledA>\n                )\n              }\n              return string\n            })\n          : description}\n      </p>\n    </CardBody>\n  </Card>\n)\n","import React from 'react'\nimport { BackgroundColorProperty } from 'csstype'\nimport {\n  Card,\n  CardHeader,\n  CardHeaderIconWrapper,\n  CardHeaderText,\n  CardBody,\n} from './Card'\nimport Flex from './flex'\nimport DynamicIcon from './DynamicIcon'\n\ninterface IExperienceCardProps {\n  name: string\n  type: string\n  icon: string\n  dateRange: string\n  description: string\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const ExperienceCard = ({\n  name,\n  type,\n  icon,\n  dateRange,\n  description,\n  backgroundColor,\n}: IExperienceCardProps) => (\n  <Card>\n    <CardBody>\n      <CardHeader>\n        <Flex justifyContent=\"flex-start\">\n          <CardHeaderIconWrapper backgroundColor={backgroundColor}>\n            <DynamicIcon path={icon} />\n          </CardHeaderIconWrapper>\n          <CardHeaderText>\n            <h1>\n              {name} ({type})\n            </h1>\n            <h2>{dateRange}</h2>\n          </CardHeaderText>\n        </Flex>\n      </CardHeader>\n      <main>\n        <p>{description}</p>\n      </main>\n    </CardBody>\n  </Card>\n)\n","interface ISkill {\n  title: string\n  level: number\n  description: string | (string | { url: string; text: string })[]\n  time: number\n}\n\nexport const skills: { [key: string]: ISkill[] } = {\n  programming: [\n    {\n      title: 'HTML(5)',\n      level: 4,\n      description:\n        \"HTML, along with CSS, is obviously used in any front-end JavaScript framework. Either plainly, or through JSX. I find HTML's default margins on elements stupidly annoying and always require some sort of a 'reset' CSS file. Also: article-header-main-aside-footer. I'm just glad I wasn't around during the whole table-layout-everything-fad.\",\n      time: 3000,\n    },\n    {\n      title: 'CSS(3)',\n      level: 4,\n      description:\n        \"I love CSS and everything you can do with it nowadays without having to resort to JavaScript. Most notably, the CSS Grid, Flex and Filter specs. But also clip-path seems pretty cool. I always use some sort of preprocessor, be it Stylus or something like styled-components or Emotion for React (or whatever is available CSS-in-JS-wise. I don't like having to worry about naming things following any naming scheme like BEM). Not a big fan of using UI frameworks like Bootstrap or Material UI, even though I like the look & feel of it.\",\n      time: 3000,\n    },\n    {\n      title: 'JavaScript',\n      level: 4,\n      description:\n        'I feel adequate using everything above ES6, but not about working with polyfills / older versions of JavaScript. I can work with the class syntax, or just plain Objects and Functions. I get Promises and Async / Await, but I feel like I could still learn how to apply it in better ways. I have played with Web Components and I like the idea. There just needs to be 1 definitive spec & implementation across (modern) browsers.',\n      time: 2000,\n    },\n    {\n      title: 'TypeScript',\n      level: 3,\n      description: [\n        \"I absolutely love it. I understand TypeScript's limits but having the compile-time safety has proven to be a huge time-saver, especially when using the strictest tsconfig imagineable. Combining the power of \",\n        {\n          url:\n            'https://github.com/CSMR-DB/phyx-api/blob/master/src/tiny-di/tiny-di.ts',\n          text: 'Reflect-metadata with Decorators to create a tiny DI system',\n        },\n        ' is awesome. (Thanks to ',\n        {\n          url:\n            'https://medium.com/@OlegVaraksin/minimalistic-dependency-injection-di-container-in-typescript-2ce93d1c303b',\n          text: 'this Medium post',\n        },\n        ').',\n      ],\n      time: 600,\n    },\n    {\n      title: 'GraphQL',\n      level: 2,\n      description:\n        'Yes! Please, use it more. I think the developer experience of using GraphQL is absolutely amazing. Having control over WHAT you want to fetch, preventing over- / under-fetching of data is just marvellous. And you can wrap REST APIs in GraphQL, forcing the server to do the heavy lifting of dealing with over- & under-fetching of data and returning only the essential data to the client. Getting an object with 200 lines of data when I only want about 20 is NOT fun.',\n      time: 400,\n    },\n    {\n      title: 'React',\n      level: 3,\n      description:\n        'As with all view-libraries I believe that one should be able to replace the layer at any point in time. Business logic has no place in Components and should be extracted to services, so that when you might swap out the view layer, you could just rely on those exact services to provide you with the data you want to display.',\n      time: 1000,\n    },\n    {\n      title: 'Angular',\n      level: 2,\n      description:\n        \"I love the complexity, but haven't used it much at all. It's built with TypeScript, so that's a big plus. Also, it encourages the use of Services to hold business logic. Also, Angular taught me the idea of Dependency Injection.\",\n      time: 200,\n    },\n    {\n      title: 'Vue',\n      level: 1,\n      description: [\n        \"Hardly ever really touched Vue, but I'm really interested to learn more about it. The only thing I ever made was \",\n        {\n          url: 'https://codepen.io/CSMR/pen/wjRaqe',\n          text: 'a single-page prototype',\n        },\n        ' for an assignment in year 3.',\n      ],\n      time: 100,\n    },\n    {\n      title: 'MongoDB',\n      level: 3,\n      description:\n        \"MongoDB being provided by default in MeteorJS' stack has made it the first DB engine I have worked with. Reading the JSON-like format used in Collections has made it easy to work with. I've used Mongoose to create strongly typed schemas and to .populate() documents in a somewhat relational manner.\",\n      time: 400,\n    },\n    {\n      title: 'Jest',\n      level: 2,\n      description:\n        \"Let's just say that thus far I've only really used Jest as my JavaScript testing framework, extended by ts-jest. Other frameworks might work just as well, I would imagine.\",\n      time: 400,\n    },\n    {\n      title: 'Git',\n      level: 1,\n      description:\n        \"I know about and understand the purpose of version control and find it infuriating to see big (game) publishers not using it properly. But personally, I have only really used Git for personal projects. I haven't dealt with branches or any form of consistency in commits, as I've never really felt the need to. I haven't yet collaborated with anyone or had someone to code review with, so my commits tend to be big and messy. This is just for personal projects where I'm all about experimenting and refactoring constantly.\",\n      time: 20,\n    },\n  ],\n  graphics: [\n    {\n      title: 'Adobe Illustrator',\n      level: 3,\n      description:\n        \"You need me to help out with design? No problem at all. I consider myself to be able to at least take on someone else's duties during their time off. Image Trace is my secret sauce.\",\n      time: 400,\n    },\n    {\n      title: 'Adobe After Effects',\n      level: 2,\n      description:\n        'I have only really used it to make short animations, or short compilations of videos for courses. I know that the the quality of source footage is crucial when it comes to making a decent composition. Highly enjoy working with it, for sure.',\n      time: 200,\n    },\n    {\n      title: 'Adobe InDesign',\n      level: 2,\n      description:\n        \"It was pretty much a requirement in college to create all kinds of documentation using InDesign. The possibilities it gives you with Master Pages and the flexibility with TOC generation is absolutely amazing. The only thing aside from more conventional documents I've ever really made is a basic Styleguide for a fictional company as part of a course assignment.\",\n      time: 100,\n    },\n  ],\n}\n","import React from 'react'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { SkillCard } from '../components/SkillCard'\nimport styled from 'styled-components'\nimport { ExperienceCard } from '../components/ExperienceCard'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Grid } from '../components/grid'\nimport { skills } from '../data/skills'\nimport { StyledLink } from '../components/StyledLink'\n\nconst ContentSeparator = styled.div`\n  padding-bottom: 4rem;\n`\n\nconst SkillsetPage = () => (\n  <Layout>\n    <SEO title=\"My experience & skills\" />\n    <CenteredBlock>\n      <ContentSeparator>\n        <h1>Education</h1>\n        <ExperienceCard\n          name=\"Digital Media & Communication\"\n          type=\"HBO\"\n          icon=\"icons/hu_logo.jpg\"\n          dateRange=\"sep 2015 - feb 2019\"\n          description=\"This is where my interest in programming started, as well as my first steps into graphic design. I learned about marketing and doing user research. Halfway through my final year I decided to drop out due to lack of motivation as I wanted to pursue learning more about programming.\"\n          backgroundColor=\"#298CCD\"\n        />\n      </ContentSeparator>\n      <ContentSeparator>\n        <h1>Professional experience</h1>\n        <ExperienceCard\n          name=\"SmartHOTEL\"\n          type=\"Internship\"\n          icon=\"icons/smarthotel_logo.png\"\n          dateRange=\"sep 2017 - feb 2018\"\n          description=\"I worked on a data visualization dashboard to provide the company with\n        insights in their key metrics, to see how their BHAG (Big, Hairy,\n        Audacious Goal) was progressing. This project was built using MeteorJS,\n        React (with styled-components), D3.js, GraphQL and the database of\n        choice was MongoDB. It was deployed locally on an Ubuntu Server VM and\n        had a C# application to collect the data running on a Windows Server VM.\n        There is nothing to show for it, since it was an internal project. No\n        access from outside.\"\n          backgroundColor=\"#F18600\"\n        />\n      </ContentSeparator>\n      <ContentSeparator>\n        <h1>So, you want to know more?</h1>\n        <p>\n          From my experience so far, programming is about 20% actually writing\n          code and 80% \"looking stuff up\", gathering requirements, defining test\n          scenarios. Obviously, this can vary on a daily basis. But when it\n          comes to actually creating, how do I think I'd score? The time spent\n          is a rough estimate and should be seen as a total of the 20 / 80\n          split.\n        </p>\n      </ContentSeparator>\n    </CenteredBlock>\n    <ContentSeparator>\n      <Grid columns=\"repeat(auto-fill, minmax(24rem, 1fr))\" maxWidth=\"100rem\">\n        {skills.programming.map((code, i) => (\n          <SkillCard\n            level={code.level}\n            title={code.title}\n            description={code.description}\n            time={code.time}\n            key={i}\n          />\n        ))}\n      </Grid>\n    </ContentSeparator>\n    <ContentSeparator>\n      <CenteredBlock>\n        <p>\n          I would like to point out that these scores are more \"relative\" to\n          each other than \"absolute\". Whatever the subject, there's still a lot\n          to learn. I also know that whatever problem I may face dealing with\n          code, eventually a solution will come. I also know that becoming an\n          expert in any field takes at least 10.000 hours of practise. More\n          often than not, I'll be browsing Medium to look for new blogposts\n          regarding JS. Always trying to imrpove. Most importantly investing\n          more time in JavaScript / TypeScript than any specific framework, so\n          that it'll be easier to pick up whatever comes next.\n        </p>\n        <p>\n          But, as I also mention in the{' '}\n          <StyledLink to=\"/about\">about me section</StyledLink>, I have some\n          experience with other programs outside of programming.\n        </p>\n      </CenteredBlock>\n    </ContentSeparator>\n    <Grid columns=\"repeat(auto-fill, minmax(24rem, 1fr))\" maxWidth=\"100rem\">\n      {skills.graphics.map((graphic, i) => (\n        <SkillCard\n          level={graphic.level}\n          title={graphic.title}\n          description={graphic.description}\n          time={graphic.time}\n        />\n      ))}\n    </Grid>\n  </Layout>\n)\n\nexport default SkillsetPage\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty, JustifyContentProperty } from 'csstype'\n\ninterface IFlexProps {\n  children: ReactNode\n  background?: BackgroundColorProperty\n  justifyContent?: JustifyContentProperty\n}\n\nconst StyledFlex: StyledComponent<'div', any, IFlexProps, never> = styled.div`\n  position: relative;\n  background: ${(props: IFlexProps) => props.background || 'transparent'};\n\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: IFlexProps) =>\n    props.justifyContent || 'space-around'};\n  transition: all 0.25s ease-in-out;\n\n  :hover {\n    background: transparent;\n  }\n`\n\nconst Flex = ({ children, background, justifyContent }: IFlexProps) => (\n  <StyledFlex background={background} justifyContent={justifyContent}>\n    {children}\n  </StyledFlex>\n)\n\nexport default Flex\n","import styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty } from 'csstype'\n\nexport const Card = styled.article`\n  position: relative;\n  /* padding: 2em; */\n  /* border: 1px solid grey; */\n  border-radius: 0.25rem;\n  /* margin-bottom: 1rem; */\n  display: grid;\n  grid-template-areas: 'header' 'body' 'footer';\n  grid-template-rows: auto 1fr auto;\n  overflow: hidden;\n  background: white;\n  box-shadow: 0 0.075rem 0.075rem rgba(0, 0, 0, 0.1),\n    0 0.125rem 0.125rem rgba(0, 0, 0, 0.25);\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n\n  &:hover {\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.25),\n      0 0.25rem 0.25rem rgba(0, 0, 0, 0.2);\n    transform: translateY(-0.25rem);\n  }\n\n  & h1 {\n    font-size: 1.5em;\n    margin: 0;\n  }\n\n  & h2 {\n    font-size: 1.1em;\n    font-style: italic;\n    margin: 0;\n    color: #aaa;\n    margin-bottom: 1rem;\n  }\n\n  & p {\n    margin: 0;\n    text-align: justify;\n  }\n\n  & header {\n    margin-bottom: 2em;\n  }\n`\n\nexport const CardHeader = styled.header`\n  margin-bottom: 2em;\n  max-height: 18rem;\n  overflow: hidden;\n  grid-area: 'header';\n`\n\nexport const CardHeaderText = styled.div`\n  padding-left: 2em;\n`\n\ninterface ICardHeaderIconWrapperProps {\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const CardHeaderIconWrapper: StyledComponent<\n  'div',\n  any,\n  ICardHeaderIconWrapperProps,\n  never\n> = styled.div`\n  border-radius: 999px;\n  overflow: hidden;\n  max-width: 4em;\n  width: 100%;\n  max-height: 4em;\n  height: 100%;\n  background: ${(props: ICardHeaderIconWrapperProps) =>\n    props.backgroundColor || '#DDD'};\n  padding: 0.5em;\n`\n\nexport const CardBody = styled.main`\n  position: relative;\n  padding: 2em;\n  grid-area: 'body';\n`\n\nexport const CardFooter = styled.footer`\n  background: #eee;\n  padding: 2em;\n  border-top: 1px solid grey;\n  grid-area: 'footer';\n\n  & span {\n    padding: 0 0.25em;\n  }\n`\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\nimport styled from 'styled-components'\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nconst StyledDynamicIcon = styled(Img)`\n  max-width: 4rem;\n  width: 100%;\n  max-height: 4rem;\n  height: 100%;\n`\n\nfunction renderImage(file: IFluidImage) {\n  return <StyledDynamicIcon fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicIconProps {\n  path: string\n}\n\nconst DynamicIcon = function({ path }: IDynamicIconProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 128) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }) =>\n        renderImage(\n          images.edges.find(\n            (image: IFluidImage) => image.node.relativePath === path\n          ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {…}}\n        )\n      }\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicIcon\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}