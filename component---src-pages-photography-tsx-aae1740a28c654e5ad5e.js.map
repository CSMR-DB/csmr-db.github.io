{"version":3,"sources":["webpack:///./src/pages/photography.tsx","webpack:///./src/components/dynamicimage.tsx"],"names":["SecondPage","title","description","columns","path","DynamicImage","query","render","images","edges","map","image","i","node","relativePath","includes","file","key","fluid","childImageSharp"],"mappings":"0FAAA,+DA2BeA,UApBI,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAM,UACNC,YAAY,mDAEd,iCACE,2CACA,yMAMF,kBAAC,IAAD,CAAMC,QAAS,GACb,kBAAC,IAAD,CAAcC,KAAK,qB,uGCoDVC,IA9CM,YAAuC,IAA5BD,EAA4B,EAA5BA,KAC9B,OACE,kBAAC,IAAD,CACEE,MAAK,aAmBLC,OAAQ,YAGN,OAHmC,EAA1BC,OAGKC,MAAMC,KAAI,SAACC,EAAoBC,GAArB,OACtBD,EAAME,KAAKC,eAAiBV,GAC5BO,EAAME,KAAKC,aAAaC,SAASX,IAnCtBY,EAoCKL,OApC+B,KAAjBM,EAoCPL,KApCOK,EAAc,GAC7C,kBAAC,IAAD,CAAKA,IAAKA,EAAKC,MAAOF,EAAKH,KAAKM,gBAAgBD,SAoC3C,KArCd,IAAqBF,EAAmBC,MAUpC,W","file":"component---src-pages-photography-tsx-aae1740a28c654e5ad5e.js","sourcesContent":["import React from 'react'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { Grid } from '../components/grid'\nimport DynamicImage from '../components/dynamicimage'\n\nconst SecondPage = () => (\n  <Layout>\n    <SEO\n      title=\"Contact\"\n      description=\"Get in touch with me through some social links\"\n    />\n    <article>\n      <h1>Photography</h1>\n      <p>\n        Something I also enjoy doing, but don't do that often. As part of my\n        personal story I figured it could be fun to add some shots that I think\n        worked out quite acceptably.\n      </p>\n    </article>\n    <Grid columns={3}>\n      <DynamicImage path=\"photography/\" />\n    </Grid>\n  </Layout>\n)\n\nexport default SecondPage\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface IImageEdges {\n  images: {\n    edges: (IFluidImage)[]\n  }\n}\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nfunction renderImage(file: IFluidImage, key: number = 1) {\n  return <Img key={key} fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicImageProps {\n  path: string\n}\n\nconst DynamicImage = function({ path }: IDynamicImageProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 960) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }: IImageEdges) => {\n        // console.log(images)\n\n        return images.edges.map((image: IFluidImage, i: number) =>\n          image.node.relativePath === path ||\n          image.node.relativePath.includes(path)\n            ? renderImage(image, i)\n            : null\n        ) // Refactored so I can get ALL images from a provided folder portion of 'relativePath'\n\n        // return renderImage(\n        //   images.edges.find(\n        //     (image: IFluidImage) => image.node.relativePath.includes(path)\n        //   ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {â€¦}}\n        // )}\n      }}\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicImage\n"],"sourceRoot":""}