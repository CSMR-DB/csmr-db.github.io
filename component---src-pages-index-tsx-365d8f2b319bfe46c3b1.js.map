{"version":3,"sources":["webpack:///./src/components/Fixed.tsx","webpack:///./src/components/blend.tsx","webpack:///./src/components/MenuTile.tsx","webpack:///./src/components/Filter.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/flex.tsx","webpack:///./src/components/Absolute.tsx"],"names":["FixedElement","styled","div","props","width","height","top","left","Fixed","children","StyledDiv","isolation","mode","hoverMode","Blend","MenuTile","blendMode","imagePath","to","background","title","path","StyledLink","color","Filter","StyledIndexPage","StyledIndexLogoImageContainer","IndexPage","Grid","rows","columns","routes","map","route","i","key","Absolute","size","strokeColor","strokeSize","fill","StyledFlex","justifyContent","Flex","AbsoluteCenter"],"mappings":"8IAkBMA,EAKFC,IAAOC,IAAV,sEAAGD,CAAH,2DAEU,SAACE,GAAD,OACPA,EAAMC,OAAS,UACP,SAACD,GAAD,OACRA,EAAME,QAAU,UACX,SAACF,GAAD,OAA+CA,EAAMG,KAAO,OAC3D,SAACH,GAAD,OAAgDA,EAAMI,MAAQ,OAG3DC,EAM2B,SAAC,GAAD,IACtCC,EADsC,EACtCA,SACAH,EAFsC,EAEtCA,IACAC,EAHsC,EAGtCA,KACAH,EAJsC,EAItCA,MACAC,EALsC,EAKtCA,OALsC,OAOtC,kBAACL,EAAD,CAAcM,IAAKA,EAAKC,KAAMA,EAAMH,MAAOA,EAAOC,OAAQA,GACvDI,I,kBCnCCC,EAAwDT,IAAOC,IAAV,sEAAGD,CAAH,+RAE5C,SAACE,GAAD,OACXA,EAAMQ,UAAY,UAAY,UAYZ,SAACR,GAAD,OAAyCA,EAAMS,QAQ7C,SAACT,GAAD,OAChBA,EAAMU,WAAaV,EAAMS,QAKpBE,EAKe,SAAC,GAAD,IAC1BL,EAD0B,EAC1BA,SACAG,EAF0B,EAE1BA,KACAC,EAH0B,EAG1BA,UAH0B,IAI1BF,iBAJ0B,gBAM1B,kBAACD,EAAD,CAAWE,KAAMA,EAAMD,UAAWA,EAAWE,UAAWA,GACrDJ,I,kBCrCQM,EAMuB,SAAC,GAAD,IAClCC,EADkC,EAClCA,UACAC,EAFkC,EAElCA,UACAC,EAHkC,EAGlCA,GACAC,EAJkC,EAIlCA,WACAC,EALkC,EAKlCA,MALkC,OAOlC,kBAAC,EAAD,CAAOR,KAAMI,EAAWL,WAAW,GAChCM,EAAY,kBAAC,IAAD,CAAcI,KAAMJ,IAAgB,KACjD,kBAACK,EAAA,EAAD,CAAYC,MAAM,QAAQL,GAAIA,GAC5B,kBAAC,IAAD,CAAMC,WAAYA,GAChB,4BAAKC,OC/BAI,EAAiDvB,IAAOC,IAAV,yDAAGD,CAAH,gG,SCWrDwB,EAA0DxB,IAAOC,IAAV,6EAAGD,CAAH,yCAMvDyB,EAKFzB,IAAOC,IAAV,2FAAGD,CAAH,2CAgDc0B,UA3CsB,kBACnC,kBAACF,EAAD,KAEE,kBAAC,EAAD,CAAOnB,IAAK,MAAOC,KAAM,MAAOF,OAAO,QAAQD,MAAM,SACnD,kBAACoB,EAAD,KACE,kBAAC,IAAD,CAAcH,KAAK,8BAGvB,kBAACO,EAAA,EAAD,CAAMvB,OAAO,QAAQwB,KAAM,EAAGC,QAAS,GACpCC,IAAOC,KAAI,SAACC,EAAqBC,GAAtB,OACV,kBAAC,EAAD,CACEC,IAAKD,EACLlB,UAAU,UACVE,GAAIe,EAAMZ,KACVF,WAAW,uBACXC,MAAOa,EAAMb,YAInB,kBAAC,EAAD,CACEd,IAAI,kBACJC,KAAK,kBACLH,MAAM,OACNC,OAAO,QAEP,kBAAC,IAAD,KACE,kBAAC+B,EAAA,EAAD,KACE,kBAACV,EAAD,KACE,kBAAC,IAAD,CAAcL,KAAK,uBAGvB,kBAAC,IAAD,CACEgB,KAAM,IACNC,YAAY,QACZC,WAAY,EACZC,KAAK,qB,iCChEf,sDAWMC,EAXN,KAWmExC,EAAOC,IAAV,uEAAGD,CAAH,uKAEhD,SAACE,GAAD,OACZA,EAAMgB,YAAc,iBAKH,SAAChB,GAAD,OACjBA,EAAMuC,gBAAkB,kBAQfC,EAImB,SAAC,GAAD,IAC9BlC,EAD8B,EAC9BA,SACAU,EAF8B,EAE9BA,WACAuB,EAH8B,EAG9BA,eAH8B,OAK9B,kBAACD,EAAD,CAAYtB,WAAYA,EAAYuB,eAAgBA,GACjDjC,K,iCCtCL,sCAEamC,EAFb,KAOI3C,EAAOC,IAAV,0EAAGD,CAAH","file":"component---src-pages-index-tsx-365d8f2b319bfe46c3b1.js","sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport {\n  WidthProperty,\n  HeightProperty,\n  TopProperty,\n  LeftProperty,\n  // tslint:disable-next-line: no-implicit-dependencies\n} from 'csstype'\n\ninterface IFixedElementProps {\n  children: ReactNode\n  top?: TopProperty<1>\n  left?: LeftProperty<1>\n  width?: WidthProperty<1>\n  height?: HeightProperty<1>\n}\n\nconst FixedElement: StyledComponent<\n  'div',\n  any,\n  IFixedElementProps,\n  never\n> = styled.div`\n  position: fixed;\n  width: ${(props: IFixedElementProps): WidthProperty<1> =>\n    props.width || '100%'};\n  height: ${(props: IFixedElementProps): HeightProperty<1> =>\n    props.height || '100%'};\n  top: ${(props: IFixedElementProps): TopProperty<1> => props.top || '0'};\n  left: ${(props: IFixedElementProps): LeftProperty<1> => props.left || '0'};\n`\n\nexport const Fixed: ({\n  children,\n  top,\n  left,\n  width,\n  height,\n}: IFixedElementProps) => JSX.Element = ({\n  children,\n  top,\n  left,\n  width,\n  height,\n}: IFixedElementProps): JSX.Element => (\n  <FixedElement top={top} left={left} width={width} height={height}>\n    {children}\n  </FixedElement>\n)\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { MixBlendModeProperty, IsolationProperty } from 'csstype'\n\ninterface IBlend {\n  children: ReactNode\n  mode: MixBlendModeProperty\n  hoverMode?: MixBlendModeProperty\n  isolation?: boolean\n}\n\nconst StyledDiv: StyledComponent<'div', any, IBlend, never> = styled.div`\n  position: relative;\n  isolation: ${(props: IBlend): IsolationProperty =>\n    props.isolation ? 'isolate' : 'auto'};\n  overflow: hidden; /** to make sure the containing element has no children overlapping parent's sibling elements */\n\n  & > :first-child {\n    position: relative !important;\n  }\n\n  :hover > :first-child {\n    transform: scale(1.1);\n  }\n\n  & > * {\n    mix-blend-mode: ${(props: IBlend): MixBlendModeProperty => props.mode};\n    position: absolute !important; /** to work with gatsby-image, adding !important is a required override */\n    width: 100%;\n    height: 100%;\n    top: 0;\n    transition: all 0.25s ease-in-out;\n\n    :hover {\n      mix-blend-mode: ${(props: IBlend): MixBlendModeProperty =>\n        props.hoverMode || props.mode};\n    }\n  }\n`\n\nexport const Blend: ({\n  children,\n  mode,\n  hoverMode,\n  isolation,\n}: IBlend) => JSX.Element = ({\n  children,\n  mode,\n  hoverMode,\n  isolation = false,\n}: IBlend): JSX.Element => (\n  <StyledDiv mode={mode} isolation={isolation} hoverMode={hoverMode}>\n    {children}\n  </StyledDiv>\n)\n","import React from 'react'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { BackgroundColorProperty, BlendMode } from 'csstype'\nimport { Blend } from './blend'\nimport { DynamicImage } from './dynamicimage'\nimport { StyledLink } from './StyledLink'\nimport { Flex } from './flex'\n\ninterface IMenuTileProps {\n  blendMode: BlendMode\n  imagePath?: string\n  to: string\n  background: BackgroundColorProperty\n  title: string\n}\n\nexport const MenuTile: ({\n  blendMode,\n  imagePath,\n  to,\n  background,\n  title,\n}: IMenuTileProps) => JSX.Element = ({\n  blendMode,\n  imagePath,\n  to,\n  background,\n  title,\n}: IMenuTileProps): JSX.Element => (\n  <Blend mode={blendMode} isolation={true}>\n    {imagePath ? <DynamicImage path={imagePath} /> : null}\n    <StyledLink color=\"white\" to={to}>\n      <Flex background={background}>\n        <h1>{title}</h1>\n      </Flex>\n    </StyledLink>\n  </Blend>\n)\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const Filter: StyledComponent<'div', any, {}, never> = styled.div`\n  filter: blur(0.5em) sepia(0.5) saturate(2) grayscale(0.5);\n  transform: scale(1.2);\n  height: 100%;\n`\n","import React from 'react'\n// import {SEO} from '../components/seo'\nimport { Flex } from '../components/flex'\nimport { Grid } from '../components/Grid'\nimport { Fixed } from '../components/Fixed'\nimport { Logo } from '../components/logo'\nimport { routes, IRouteObject } from '../data/routes'\nimport { MenuTile } from '../components/MenuTile'\nimport { DynamicImage } from '../components/dynamicimage'\nimport { Filter } from '../components/Filter'\nimport styled, { StyledComponent } from 'styled-components'\nimport { AbsoluteCenter } from '../components/Absolute'\n\nconst StyledIndexPage: StyledComponent<'div', any, {}, never> = styled.div`\n  .gatsby-image-wrapper {\n    height: 100%;\n  }\n`\n\nconst StyledIndexLogoImageContainer: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  border-radius: 999rem;\n  overflow: hidden;\n`\n\nconst IndexPage: () => JSX.Element = (): JSX.Element => (\n  <StyledIndexPage>\n    {/* <SEO title=\"Homepage\" /> */}\n    <Fixed top={'0px'} left={'0px'} height=\"100vh\" width=\"100vw\">\n      <Filter>\n        <DynamicImage path=\"wallpaper/wallpaper.jpg\" />\n      </Filter>\n    </Fixed>\n    <Grid height=\"100vh\" rows={2} columns={2}>\n      {routes.map((route: IRouteObject, i: number) => (\n        <MenuTile\n          key={i}\n          blendMode=\"overlay\"\n          to={route.path}\n          background=\"rgba(66, 66, 66, .2)\"\n          title={route.title}\n        />\n      ))}\n    </Grid>\n    <Fixed\n      top=\"calc(50% - 8em)\"\n      left=\"calc(50% - 8em)\"\n      width=\"16em\"\n      height=\"16em\"\n    >\n      <Flex>\n        <AbsoluteCenter>\n          <StyledIndexLogoImageContainer>\n            <DynamicImage path=\"wallpaper/me.jpg\" />\n          </StyledIndexLogoImageContainer>\n        </AbsoluteCenter>\n        <Logo\n          size={192}\n          strokeColor=\"white\"\n          strokeSize={4}\n          fill=\"transparent\"\n        />\n      </Flex>\n    </Fixed>\n  </StyledIndexPage>\n)\n\n// tslint:disable-next-line: no-default-export\nexport default IndexPage\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { BackgroundColorProperty, JustifyContentProperty } from 'csstype'\n\nexport interface IFlexProps {\n  children: ReactNode\n  background?: BackgroundColorProperty\n  justifyContent?: JustifyContentProperty\n}\n\nconst StyledFlex: StyledComponent<'div', any, IFlexProps, never> = styled.div`\n  position: relative;\n  background: ${(props: IFlexProps): BackgroundColorProperty =>\n    props.background || 'transparent'};\n\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: IFlexProps): JustifyContentProperty =>\n    props.justifyContent || 'space-around'};\n  transition: all 0.25s ease-in-out;\n\n  :hover {\n    background: transparent;\n  }\n`\n\nexport const Flex: ({\n  children,\n  background,\n  justifyContent,\n}: IFlexProps) => JSX.Element = ({\n  children,\n  background,\n  justifyContent,\n}: IFlexProps): JSX.Element => (\n  <StyledFlex background={background} justifyContent={justifyContent}>\n    {children}\n  </StyledFlex>\n)\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const AbsoluteCenter: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n`\n"],"sourceRoot":""}