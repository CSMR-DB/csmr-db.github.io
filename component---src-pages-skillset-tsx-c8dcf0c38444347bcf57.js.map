{"version":3,"sources":["webpack:///./src/components/Card.tsx","webpack:///./src/components/SkillCard.tsx","webpack:///./src/components/ExperienceCard.tsx","webpack:///./src/pages/skillset.tsx","webpack:///./src/components/flex.tsx","webpack:///./src/components/DynamicIcon.tsx","webpack:///./node_modules/core-js/modules/es6.array.find.js"],"names":["Card","styled","article","CardHeader","header","CardHeaderText","div","CardHeaderIconWrapper","props","backgroundColor","StyledIndicator","lit","StyledIndicatorGrid","SkillCard","children","level","title","description","time","columns","ExperienceCard","name","type","icon","dateRange","justifyContent","DynamicIcon","path","ContentSeparator","SkillsetPage","to","StyledFlex","background","Flex","StyledDynamicIcon","Img","query","render","file","images","edges","find","image","node","relativePath","fluid","childImageSharp","$export","$find","forced","Array","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"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","file":"component---src-pages-skillset-tsx-c8dcf0c38444347bcf57.js","sourcesContent":["import styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty } from 'csstype'\n\nexport const Card = styled.article`\n  padding: 2em;\n  border: 1px solid grey;\n  border-radius: 0.25rem;\n  margin-bottom: 1rem;\n\n  & h1 {\n    font-size: 1.5em;\n    margin: 0;\n  }\n\n  & h2 {\n    font-size: 1.1em;\n    font-style: italic;\n    margin: 0;\n    color: #aaa;\n  }\n\n  & p {\n    margin: 0;\n  }\n\n  & header {\n    margin-bottom: 2em;\n  }\n`\n\nexport const CardHeader = styled.header`\n  margin-bottom: 2em;\n`\n\nexport const CardHeaderText = styled.div`\n  padding-left: 2em;\n`\n\ninterface ICardHeaderIconWrapperProps {\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const CardHeaderIconWrapper: StyledComponent<'div', any, ICardHeaderIconWrapperProps, never> = styled.div`\n  border-radius: 999px;\n  overflow: hidden;\n  max-width: 4em;\n  width: 100%;\n  max-height: 4em;\n  height: 100%;\n  background: ${(props: ICardHeaderIconWrapperProps) => props.backgroundColor || '#DDD'};\n  padding: .5em;\n`","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { Grid } from './grid'\nimport { Card } from './Card'\n\ninterface ISkillCardProps {\n  children?: ReactNode\n  level: number\n  title: string\n  description: string\n  time: number\n}\n\ninterface IStyledIndicator {\n  lit: boolean\n}\n\nconst StyledIndicator = styled.div`\n  padding: 0.25em;\n  width: 1em;\n  height: 1em;\n  border-radius: 1em;\n  background: ${(props: IStyledIndicator) =>\n    props.lit ? '#ffb74d' : 'lightgrey'};\n`\n\nconst StyledIndicatorGrid = styled.div`\n  max-width: 8em;\n`\n\nexport const SkillCard = ({\n  children,\n  level,\n  title,\n  description,\n  time,\n}: ISkillCardProps) => (\n  <Card>\n    <header>\n      <Grid columns={2}>\n        <StyledIndicatorGrid>\n          <Grid columns={5}>\n            <StyledIndicator lit={level >= 1}></StyledIndicator>\n            <StyledIndicator lit={level >= 2}></StyledIndicator>\n            <StyledIndicator lit={level >= 3}></StyledIndicator>\n            <StyledIndicator lit={level >= 4}></StyledIndicator>\n            <StyledIndicator lit={level === 5}></StyledIndicator>\n          </Grid>\n        </StyledIndicatorGrid>\n        <p>\n          {title} (time spent: ~{time} hours)\n        </p>\n      </Grid>\n    </header>\n    <p>{description}</p>\n    <div>{children}</div>\n  </Card>\n)\n","import React from 'react'\r\nimport { BackgroundColorProperty } from \"csstype\";\r\nimport { Card, CardHeader, CardHeaderIconWrapper, CardHeaderText } from \"./Card\";\r\nimport Flex from \"./flex\";\r\nimport DynamicIcon from \"./DynamicIcon\";\r\n\r\ninterface IExperienceCardProps {\r\n  name: string\r\n  type: string\r\n  icon: string\r\n  dateRange: string\r\n  description: string\r\n  backgroundColor: BackgroundColorProperty\r\n}\r\n\r\nexport const ExperienceCard = ({\r\n  name,\r\n  type,\r\n  icon,\r\n  dateRange,\r\n  description,\r\n  backgroundColor\r\n}: IExperienceCardProps) => (\r\n  <Card>\r\n    <CardHeader>\r\n      <Flex justifyContent=\"flex-start\">\r\n        <CardHeaderIconWrapper backgroundColor={backgroundColor}>\r\n          <DynamicIcon path={icon} />\r\n        </CardHeaderIconWrapper>\r\n        <CardHeaderText>\r\n          <h1>\r\n            {name} ({type})\r\n          </h1>\r\n          <h2>{dateRange}</h2>\r\n        </CardHeaderText>\r\n      </Flex>\r\n    </CardHeader>\r\n    <main>\r\n      <p>{description}</p>\r\n    </main>\r\n  </Card>\r\n)","import React from 'react'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { Link } from 'gatsby'\nimport { SkillCard } from '../components/SkillCard'\nimport styled from 'styled-components'\nimport { ExperienceCard } from '../components/ExperienceCard'\n\nconst ContentSeparator = styled.div`\n  padding-bottom: 4rem;\n`\n\nconst SkillsetPage = () => (\n  <Layout>\n    <SEO title=\"My experience & skills\" />\n    <ContentSeparator>\n      <h1>Education</h1>\n      <ExperienceCard\n        name=\"Digital Media & Communication\"\n        type=\"HBO\"\n        icon=\"icons/hu_logo.jpg\"\n        dateRange=\"sep 2015 - feb 2019\"\n        description=\"This is where my interest in programming started, as well as my first steps into graphic design. I learned about marketing and doing user research. Halfway through my final year I decided to drop out due to lack of motivation as I wanted to pursue learning more about programming.\"\n        backgroundColor=\"#298CCD\"\n      />\n    </ContentSeparator>\n    <ContentSeparator>\n      <h1>Professional experience</h1>\n      <ExperienceCard\n        name=\"SmartHOTEL\"\n        type=\"Internship\"\n        icon=\"icons/smarthotel_logo.png\"\n        dateRange=\"sep 2017 - feb 2018\"\n        description=\"I worked on a data visualization dashboard to provide the company with\n        insights in their key metrics, to see how their BHAG (Big, Hairy,\n        Audacious Goal) was progressing. This project was built using MeteorJS,\n        React (with styled-components), D3.js, GraphQL and the database of\n        choise was MongoDB. It was deployed locally on an Ubuntu Server VM and\n        had a C# application to collect the data running on a Windows Server VM.\n        There is nothing to show for it, since it was an internal project. No\n        access from outside.\"\n        backgroundColor=\"#F18600\"\n      />\n    </ContentSeparator>\n    <ContentSeparator>\n      <h1>So, you want to know more?</h1>\n      <p>\n        From my experience so far, programming is about 20% actually writing code\n        and 80% \"looking stuff up\", gathering requirements, defining test\n        scenarios. Obviously, this can vary on a daily basis. But when it comes to\n        actually creating, how do I think I'd score? The time spent is a rough\n        estimate and should be seen as a total of the 20 / 80 split.\n      </p>\n      <SkillCard\n        level={4}\n        title=\"HTML(5)\"\n        description=\"HTML, along with CSS, is obviously used in any front-end JavaScript framework. Either plainly, or through JSX. I find HTML's default margins on elements stupidly annoying and always require some sort of a 'reset' CSS file.\"\n        time={3000}\n      />\n      <SkillCard\n        level={4}\n        title=\"CSS(3)\"\n        description=\"I love CSS and everything you can do with it nowadays without having to resort to JavaScript. Most notably, the CSS Grid and Flex specs. But also clip-path seems pretty cool. I always use some sort of preprocessor, be it Stylus or something like styled-components or Emotion for React.\"\n        time={3000}\n      />\n      <SkillCard\n        level={4}\n        title=\"JavaScript\"\n        description=\"I feel adequate using everything above ES6, but not about working with polyfills / older versions of JavaScript. I can work with the class syntax, or just plain Objects and Functions. I get Promises and Async / Await as long as it doesn't have too many layers to it.\"\n        time={2000}\n      ></SkillCard>\n      <SkillCard\n        level={3}\n        title=\"TypeScript\"\n        description=\"I absolutely love it. I understand TypeScript's limits but having the compile-time safety has proven to be a huge time-saver, especially when using the strictest tsconfig imagineable. Advanced applications of Generics are still tricky to me.\"\n        time={600}\n      ></SkillCard>\n      <SkillCard\n        level={2}\n        title=\"GraphQL\"\n        description=\"Yes! Please, use it more. I think the developer experience of using GraphQL is absolutely amazing. My limited experience working with third-party REST APIs has taught really convinced me that there is a lot to love about GraphQL.\"\n        time={400}\n      />\n      <SkillCard\n        level={3}\n        title=\"React\"\n        description=\"As with all view-libraries I believe that one should be able to replace the layer at any point in time. Business logic has no place in Components and should be extracted to services, so that when you might swap out the view layer, you could just rely on those exact services to provide you with the data you want to display.\"\n        time={1000}\n      />\n      <SkillCard\n        level={2}\n        title=\"Angular\"\n        description=\"I love the complexity, but haven't used it much at all. The fact that it's built with TypeScript is a huge win in my books.\"\n        time={100}\n      />\n      <SkillCard\n        level={1}\n        title=\"Vue\"\n        description=\"Hardly ever really touched it. It's on my to-do list to learn more about.\"\n        time={100}\n      />\n      <SkillCard\n        level={2}\n        title=\"MongoDB\"\n        description=\"MongoDB being provided by default in MeteorJS' stack has made it the first DB engine I have worked with. Reading the JSON-like format used in Collections has made it easy to work with. I have fiddled with the Aggregation Framework, but not much.\"\n        time={400}\n      />\n      <p>\n        I would like to point out that these scores are more \"relative\" to each other than \"absolute\". Whatever the subject, there's still a lot to learn. I also know that whatever problem I may face\n        dealing with code, eventually a solution will come. I also know that\n        becoming an expert in any field takes at least 10.000 hours of practise.\n        More often than not, I'll be browsing Medium to look for new blogposts\n        regarding JS. Always trying to imrpove. Most importantly investing more\n        time in JavaScript / TypeScript than any specific framework, so that it'll\n        be easier to pick up whatever comes next.\n      </p>\n      <p>\n        But, as I also mention in the <Link to=\"/about\">about me section</Link>, I\n        have some experience with other programs outside of programming.\n      </p>\n      <SkillCard\n        level={3}\n        title=\"Adobe Illustrator\"\n        description=\"You need me to help out with design? No problem at all. I consider myself to be able to at least take on someone else's duties during their time off. Image Trace is my secret sauce.\"\n        time={400}\n      />\n      <SkillCard\n        level={2}\n        title=\"Adobe After Effects\"\n        description=\"I have only really used it to make short animations, or short compilations of videos for courses. I know that the the quality of source footage is crucial when it comes to making a decent composition. Highly enjoy working with it, for sure.\"\n        time={300}\n      />\n    </ContentSeparator>\n  </Layout>\n)\n\nexport default SkillsetPage\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty, JustifyContentProperty } from 'csstype'\n\ninterface IFlexProps {\n  children: ReactNode\n  background?: BackgroundColorProperty\n  justifyContent?: JustifyContentProperty\n}\n\nconst StyledFlex: StyledComponent<'div', any, IFlexProps, never> = styled.div`\n  position: relative;\n  background: ${(props: IFlexProps) => props.background || 'transparent'};\n\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: IFlexProps) =>\n    props.justifyContent || 'space-around'};\n  transition: all 0.25s ease-in-out;\n\n  :hover {\n    background: transparent;\n  }\n\n  * {\n    /* flex-grow: 1; */\n  }\n`\n\nconst Flex = ({ children, background, justifyContent }: IFlexProps) => (\n  <StyledFlex background={background} justifyContent={justifyContent}>\n    {children}\n  </StyledFlex>\n)\n\nexport default Flex\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\nimport styled from 'styled-components'\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nconst StyledDynamicIcon = styled(Img)`\n  max-width: 4em;\n  width: 100%;\n  max-height: 4em;\n  height: 100%;\n`\n\nfunction renderImage(file: IFluidImage) {\n  return <StyledDynamicIcon fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicIconProps {\n  path: string\n}\n\nconst DynamicIcon = function({ path }: IDynamicIconProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 128) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }) =>\n        renderImage(\n          images.edges.find(\n            (image: IFluidImage) => image.node.relativePath === path\n          ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {…}}\n        )\n      }\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicIcon\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}