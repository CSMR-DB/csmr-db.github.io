{"version":3,"sources":["webpack:///./src/components/ContentSeparator.tsx","webpack:///./src/components/Relative.tsx","webpack:///./src/components/ClippedBtn.tsx","webpack:///./src/components/compositions/SocialButton.tsx","webpack:///./src/components/compositions/Contacts.tsx","webpack:///./src/layouts/ContactLayout.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCards.tsx","webpack:///./src/components/compositions/card/projectcard/ProjectCard.tsx","webpack:///./src/components/ArticleBody.tsx","webpack:///./src/components/compositions/card/projectcard/ProjectCards.tsx","webpack:///./src/components/Heart.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardIndicator.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardBackdrop.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardBody.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCardHeader.tsx","webpack:///./src/components/compositions/card/skillcard/SkillCard.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCardHeader.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCardHeaderText.tsx","webpack:///./src/components/compositions/card/CardHeaderIconWrapper.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCard.tsx","webpack:///./src/components/compositions/card/experiencecard/ExperienceCards.tsx","webpack:///./src/layouts/SkillSetLayout.tsx","webpack:///./src/components/compositions/card/CardFooter.tsx","webpack:///./src/pages/onepage.tsx","webpack:///./src/data/contacts.ts","webpack:///./src/layouts/ProjectsLayout.tsx","webpack:///./src/components/compositions/card/CardHeaderText.tsx"],"names":["ContentSeparator","styled","div","Relative","ClippedBtn","theme","breakpoints","max","tablet","color","background","css","min","desktop","StyledSocialIcon","SocialButton","children","href","iconPath","target","DynamicIcon","path","Absolute","Flex","justifyContent","Contacts","contacts","map","key","text","ContactLayout","SEO","title","CenteredBlock","Grid","columns","rows","SkillCards","edges","i","frontmatter","node","level","description","excerpt","time","index","skillColor","ProjectCard","image","video","body","tags","date","timeToRead","from","scale","opacity","duration","delay","ease","Card","CardHeader","CardHeaderImageOrVideo","CardHeaderText","StyledLink","to","DateFormatted","dateString","ReadingTime","CardBody","Array","isArray","string","url","ArticleBody","CardFooter","ArticleTags","ProjectCards","featuredVideo","featuredImage","StyledHeart","svg","fill","Heart","React","forwardRef","props","ref","viewBox","id","d","SkillCardIndicator","litColor","instance","width","height","StyledSkillCardBackdrop","attrs","className","SkillCardBackdrop","SkillCardBody","SkillCardHeader","StyledSkillCard","SkillCard","x","DynamicImage","replace","toLocaleLowerCase","direction","count","Math","sqrt","ExperienceCardHeader","header","ExperienceCardHeaderText","smartphone","CardHeaderIconWrapper","backgroundColor","ExperienceCard","name","type","icon","dateStart","dateEnd","display","ExperienceCards","SkillsetLayout","skillsetData","experienceData","maxWidth","footer","style","ProjectsPage","query","render","programmingData","graphicDesignData","posters","squares","wallpapers","CONTACTS","ProjectsLayout"],"mappings":"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","file":"component---src-pages-onepage-tsx-c8e6ba7f77713dad7f19.js","sourcesContent":["import styled, { StyledComponent } from 'styled-components'\n\nexport const ContentSeparator: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding-bottom: 4rem;\n`\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const Relative: StyledComponent<'div', any, {}, never> = styled.div`\n  position: relative;\n`\n","import styled, {\n  StyledComponent,\n  css,\n  FlattenSimpleInterpolation,\n} from 'styled-components'\nimport { ColorProperty, BackgroundColorProperty } from 'csstype'\n\nimport { theme } from '../data/theme'\n\ninterface IClippedBtnProps {\n  color?: ColorProperty\n  background?: BackgroundColorProperty\n}\n\nexport const ClippedBtn: StyledComponent<\n  'div',\n  any,\n  IClippedBtnProps,\n  never\n> = styled.div`\n  height: 100%;\n  background: transparent;\n  border-radius: 0.25rem;\n  transition: color 0.1s ease-in 0.1s;\n\n  @media ${theme.breakpoints.max.tablet} {\n    clip-path: circle(16em at 50% 50%);\n\n    ${({\n      color = 'white',\n      background = 'grey',\n    }: IClippedBtnProps): FlattenSimpleInterpolation => css`\n      color: ${color};\n      background: ${background};\n    `}\n  }\n\n  @media ${theme.breakpoints.min.desktop} {\n    clip-path: circle(1em at 50% 50%);\n    transition: all 0.25s ease-in-out;\n    font-size: 2rem;\n    color: transparent;\n\n    :hover {\n      clip-path: circle(8em at 50% 50%);\n\n      ${({\n        color = 'white',\n        background = 'grey',\n      }: IClippedBtnProps): FlattenSimpleInterpolation => css`\n        color: ${color};\n        background: ${background};\n      `}\n    }\n  }\n`\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { ColorProperty, BackgroundColorProperty } from 'csstype'\n\nimport { StyledA } from '../StyledLink'\nimport { Relative } from '../Relative'\nimport { DynamicIcon } from '../DynamicIcon'\nimport { Absolute } from '../Absolute'\nimport { ClippedBtn } from '../ClippedBtn'\nimport { Flex } from '../Flex'\n\ninterface ISocialButtonsProps {\n  children: ReactNode\n  href: string\n  color?: ColorProperty\n  background?: BackgroundColorProperty\n  iconPath: string\n}\n\nconst StyledSocialIcon: StyledComponent<'div', any, {}, never> = styled.div`\n  margin: 0 auto;\n  max-width: 4rem;\n`\n\nexport function SocialButton({\n  children,\n  color,\n  background,\n  href,\n  iconPath,\n}: ISocialButtonsProps): JSX.Element {\n  return (\n    <StyledA href={href} target=\"blank\">\n      <Relative>\n        <StyledSocialIcon>\n          <DynamicIcon path={iconPath} />\n        </StyledSocialIcon>\n        <Absolute>\n          <ClippedBtn background={background} color={color}>\n            <Flex justifyContent=\"space-around\">\n              <span>{children}</span>\n            </Flex>\n          </ClippedBtn>\n        </Absolute>\n      </Relative>\n    </StyledA>\n  )\n}\n","import React from 'react'\n\nimport { IContact } from '../../data/contacts'\n\nimport { SocialButton } from './SocialButton'\n\nexport interface IContactsProps {\n  contacts: IContact[]\n}\n\nexport function Contacts({ contacts }: IContactsProps): JSX.Element {\n  return (\n    <>\n      {contacts.map(\n        (\n          { background, iconPath, href, text }: IContact,\n          key: number\n        ): JSX.Element => (\n          <SocialButton\n            background={background}\n            iconPath={iconPath}\n            href={href}\n            key={key}\n          >\n            {text}\n          </SocialButton>\n        )\n      )}\n    </>\n  )\n}\n","import React from 'react'\n\nimport { IContact } from '../data/contacts'\n\nimport { SEO } from '../components/compositions/SEO'\nimport { Grid } from '../components/Grid'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Contacts } from '../components/compositions/Contacts'\n\nexport interface IContactLayoutProps {\n  contacts: IContact[]\n}\n\nexport function ContactLayout({ contacts }: IContactLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO\n        title=\"Contact\"\n        // description=\"Get in touch with me through some social links\"\n      />\n      <CenteredBlock>\n        <h1>Get in touch!</h1>\n        <p>\n          I don't do Twitter and I don't really use Facebook other than checking\n          it about twice a year. However, there are other ways to get in touch\n          with me. I don't have a fancy form (yet), but that shouldn't be a\n          dealbreaker. I check my mail at least once a day, LinkedIn weekly and\n          I'm pretty much always available on Discord. You just do whatever\n          feels right 😉.\n        </p>\n        <Grid columns={3} rows={1}>\n          <Contacts contacts={contacts} />\n        </Grid>\n      </CenteredBlock>\n    </>\n  )\n}\n","import React from 'react'\n\nimport {\n  ISkillsetAllMarkdownRemark,\n  ISkillsetEdge,\n} from '../../../../types/interfaces'\n\nimport { SkillCard } from './SkillCard'\n\nexport function SkillCards({ edges }: ISkillsetAllMarkdownRemark): JSX.Element {\n  return (\n    <>\n      {edges.map(\n        ({ node: { frontmatter } }: ISkillsetEdge, i: number): JSX.Element => (\n          <SkillCard\n            level={frontmatter.level || 0}\n            title={frontmatter.title}\n            description={frontmatter.excerpt}\n            time={frontmatter.time}\n            key={i}\n            index={i}\n            skillColor={frontmatter.skillColor}\n          />\n        )\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport { Tween } from 'react-gsap'\n\nimport { StringOrUrlArray } from '../../../../types/StringOrUrlObject'\nimport { IFeaturedImage } from '../../../../types/interfaces'\n\nimport { Card } from '../Card'\nimport { ArticleBody } from '../../../ArticleBody'\nimport { CardHeaderImageOrVideo } from '../CardHeaderImageOrVideo'\nimport { ArticleTags } from '../../../ArticleTags'\nimport { StyledLink } from '../../../StyledLink'\nimport { DateFormatted } from '../../../DateFormatted'\nimport { ReadingTime } from '../../../ReadingTime'\nimport { CardHeader } from '../CardHeader'\nimport { CardFooter } from '../CardFooter'\nimport { CardBody } from '../CardBody'\nimport { CardHeaderText } from '../CardHeaderText'\n\ninterface IProjectCardProps {\n  index: number\n  image?: string | IFeaturedImage\n  video?: string\n  title: string\n  body?: StringOrUrlArray\n  tags?: string[]\n  html?: string\n  date?: string\n  timeToRead?: number\n  path: string\n}\n\nexport const ProjectCard: (props: IProjectCardProps) => JSX.Element = ({\n  index,\n  image,\n  video,\n  title,\n  body,\n  tags,\n  date,\n  timeToRead,\n  path,\n}: IProjectCardProps): JSX.Element => (\n  <Tween\n    from={{ scale: 0.75, opacity: 0 }}\n    duration={1}\n    delay={0.25 + index * 0.125}\n    ease=\"back\"\n  >\n    <Card>\n      <CardHeader>\n        <CardHeaderImageOrVideo video={video} image={image} />\n        <CardHeaderText>\n          <h1>\n            <StyledLink to={path}>{title}</StyledLink>\n          </h1>\n          <h6>\n            <DateFormatted dateString={date} />\n            <span> · </span>\n            <ReadingTime timeToRead={timeToRead} />\n          </h6>\n        </CardHeaderText>\n      </CardHeader>\n      <CardBody>{ArticleBody({ body })}</CardBody>\n      <CardFooter>\n        <ArticleTags tags={tags} />\n      </CardFooter>\n    </Card>\n  </Tween>\n)\n","import React from 'react'\n\nimport { StringOrUrlObject, StringOrUrlArray } from '../types/StringOrUrlObject'\n\nimport { StyledA } from './StyledLink'\n\ninterface IArticleBodyProps {\n  body?: StringOrUrlArray\n}\n\nexport function ArticleBody({ body }: IArticleBodyProps): JSX.Element | null {\n  return (\n    (body && (\n      <p>\n        {Array.isArray(body)\n          ? body.map((string: StringOrUrlObject, i: number):\n              | JSX.Element\n              | string => {\n              if (typeof string !== 'string' && string.url) {\n                return (\n                  <StyledA href={string.url} target=\"blank\" key={i}>\n                    {string.text}\n                  </StyledA>\n                )\n              }\n\n              return string as string\n            })\n          : body}\n      </p>\n    )) ||\n    null\n  )\n}\n","import React from 'react'\n\nimport { IProjectsAllMarkdownRemark, IEdge } from '../../../../types/interfaces'\n\nimport { ProjectCard } from './ProjectCard'\n\nexport function ProjectCards({\n  edges,\n}: IProjectsAllMarkdownRemark): JSX.Element {\n  return (\n    <>\n      {edges.map(\n        (\n          { node: { frontmatter, timeToRead } }: IEdge,\n          i: number\n        ): JSX.Element => (\n          <ProjectCard\n            title={frontmatter.title}\n            tags={frontmatter.tags}\n            video={frontmatter.featuredVideo}\n            image={frontmatter.featuredImage}\n            body={frontmatter.excerpt}\n            timeToRead={timeToRead}\n            path={frontmatter.path}\n            date={frontmatter.date}\n            key={i}\n            index={i}\n          />\n        )\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport styled, {\n  StyledComponent,\n  css,\n  FlattenSimpleInterpolation,\n} from 'styled-components'\nimport { FillProperty } from 'csstype'\n\nimport { AnyExoticRefComponent, AnyExoticRefTargets } from '../types/types'\n\nexport interface IHeartProps {\n  height: string\n  width: string\n  fill: FillProperty\n}\n\nexport const StyledHeart: StyledComponent<\n  'svg',\n  any,\n  IHeartProps,\n  never\n> = styled.svg`\n  ${({ fill }: IHeartProps): FlattenSimpleInterpolation => css`\n    fill: ${fill};\n  `}\n`\n\nexport const Heart: AnyExoticRefComponent<IHeartProps> = React.forwardRef(\n  (props: IHeartProps, ref: AnyExoticRefTargets): JSX.Element => (\n    <StyledHeart {...props} viewBox=\"0 0 315 342\" ref={ref}>\n      <g id=\"heart\">\n        <path d=\"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\" />\n      </g>\n    </StyledHeart>\n  )\n)\n","import React from 'react'\nimport { ColorProperty } from 'csstype'\nimport { Tween } from 'react-gsap'\n\nimport { Heart } from '../../../Heart'\n\ninterface ISkillCardIndicator {\n  litColor: ColorProperty\n  index: number\n  instance: number\n}\n\nexport function SkillCardIndicator({\n  litColor,\n  index,\n  instance,\n}: ISkillCardIndicator): JSX.Element {\n  return (\n    <Tween\n      from={{ scale: 8, opacity: 0 }}\n      duration={0.125}\n      delay={1 + index / 8 + instance * 0.125}\n    >\n      <Heart fill={litColor} width={'1rem'} height={'1rem'} />\n    </Tween>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { Tween } from 'react-gsap'\n\nconst StyledSkillCardBackdrop: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div.attrs({ className: 'backdrop' })`\n  transition: all ease 0.5s;\n  position: absolute;\n  bottom: 1rem;\n  right: 1rem;\n  width: 100%;\n  max-width: 8rem;\n`\n\nexport function SkillCardBackdrop({\n  children,\n  index,\n}: {\n  children: ReactNode\n  index: number\n}): JSX.Element {\n  return (\n    <Tween\n      to={{ opacity: 0.25 }}\n      duration={1}\n      delay={1 + index * 0.125}\n      ease=\"power1\"\n    >\n      <StyledSkillCardBackdrop>{children}</StyledSkillCardBackdrop>\n    </Tween>\n  )\n}\n","import React from 'react'\nimport { Timeline, Tween } from 'react-gsap'\n\nimport {\n  StringOrUrlArray,\n  StringOrUrlObject,\n} from '../../../../types/StringOrUrlObject'\n\nimport { StyledA } from '../../../StyledLink'\n\ninterface ISkillCardBodyProps {\n  description: StringOrUrlArray\n  index: number\n}\nexport function SkillCardBody({\n  description,\n  index,\n}: ISkillCardBodyProps): JSX.Element {\n  return (\n    <Timeline>\n      <Tween\n        from={{ opacity: 0 }}\n        duration={1}\n        delay={1 + index * 0.125}\n        ease=\"power1\"\n      >\n        <p>\n          {Array.isArray(description)\n            ? description.map((string: StringOrUrlObject, i: number):\n                | JSX.Element\n                | string => {\n                if (typeof string !== 'string' && string.url !== '') {\n                  return (\n                    <StyledA href={string.url} target=\"blank\" key={i}>\n                      {string.text}\n                    </StyledA>\n                  )\n                }\n\n                return string as string\n              })\n            : description}\n        </p>\n      </Tween>\n    </Timeline>\n  )\n}\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const SkillCardHeader: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding: 2rem 2rem 0 2rem;\n\n  h1 {\n    font-size: 1rem;\n    font-weight: 100;\n    text-align: right;\n    align-self: normal;\n  }\n  h2 {\n    font-size: 0.8rem;\n    font-weight: 100;\n  }\n`\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { Tween } from 'react-gsap'\nimport { ColorProperty } from 'csstype'\n\nimport { StringOrUrlArray } from '../../../../types/StringOrUrlObject'\n\nimport { SkillCardIndicator } from './SkillCardIndicator'\nimport { SkillCardBackdrop } from './SkillCardBackdrop'\nimport { SkillCardBody } from './SkillCardBody'\nimport { SkillCardHeader } from './SkillCardHeader'\nimport { CardFooter } from '../CardFooter'\nimport { CardHeader } from '../CardHeader'\nimport { CardBody } from '../CardBody'\nimport { Flex } from '../../../Flex'\nimport { DynamicImage } from '../../../DynamicImage'\nimport { StyledLink } from '../../../StyledLink'\nimport { Card } from '../Card'\n\ninterface ISkillCardProps {\n  index: number\n  children?: ReactNode\n  level: number\n  title: string\n  description: StringOrUrlArray\n  skillColor: ColorProperty\n  time?: number\n}\n\nconst StyledSkillCard: StyledComponent<typeof Card, any, {}, never> = styled(\n  Card\n)`\n  &:hover {\n    .backdrop {\n      opacity: 0.75 !important;\n    }\n  }\n`\n\nexport function SkillCard({\n  index,\n  title,\n  description,\n  skillColor,\n  time = 0,\n}: ISkillCardProps): JSX.Element {\n  return (\n    <Tween\n      from={{ x: '-400px', opacity: 0 }}\n      duration={1}\n      delay={0.25 + index * 0.125}\n      ease=\"elastic\"\n    >\n      <StyledSkillCard>\n        <SkillCardBackdrop index={index}>\n          <DynamicImage\n            path={`code_icons/${title\n              .replace(/\\([0-9]*\\)|\\s+/gi, '')\n              .toLocaleLowerCase()}.png`}\n          />\n        </SkillCardBackdrop>\n        <CardHeader>\n          <SkillCardHeader>\n            <Flex justifyContent=\"space-between\" direction=\"row\">\n              <SkillCardIndicator\n                instance={index}\n                index={0}\n                litColor={skillColor}\n              ></SkillCardIndicator>\n              <h1>\n                <StyledLink\n                  to={`/tag/${title.toLocaleLowerCase().replace(/\\s+/gi, '_')}`}\n                  color={skillColor}\n                >\n                  {title}\n                </StyledLink>\n              </h1>\n            </Flex>\n          </SkillCardHeader>\n        </CardHeader>\n        <CardBody>\n          <SkillCardBody description={description} index={index} />\n        </CardBody>\n        <CardFooter>\n          <p>\n            (time spent:{' '}\n            <Tween\n              to={{ count: time }}\n              ease=\"none\"\n              duration={Math.sqrt(Math.sqrt(time)) * 0.5}\n            >\n              <span>0</span>\n            </Tween>{' '}\n            hours)\n          </p>\n        </CardFooter>\n      </StyledSkillCard>\n    </Tween>\n  )\n}\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const ExperienceCardHeader: StyledComponent<\n  'header',\n  any,\n  {},\n  never\n> = styled.header`\n  padding: 2em 2em 0em 2em;\n\n  h2 {\n    margin: 0;\n  }\n`\n","import styled, { StyledComponent } from 'styled-components'\n\nimport { theme } from '../../../../data/theme'\n\nexport const ExperienceCardHeaderText: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding: 0 2em;\n\n  ${theme.breakpoints.max.smartphone} {\n    padding: 0 0 0 1em;\n  }\n`\n","import styled, {\n  StyledComponent,\n  css,\n  FlattenSimpleInterpolation,\n} from 'styled-components'\nimport { BackgroundColorProperty } from 'csstype'\n\ninterface ICardHeaderIconWrapperProps {\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const CardHeaderIconWrapper: StyledComponent<\n  'div',\n  any,\n  ICardHeaderIconWrapperProps,\n  never\n> = styled.div`\n  border-radius: 999px;\n  overflow: hidden;\n  width: 4em;\n  padding: 0.5em;\n\n  ${({\n    backgroundColor = '#DDD',\n  }: ICardHeaderIconWrapperProps): FlattenSimpleInterpolation => css`\n    background: ${backgroundColor};\n  `}\n`\n","import React from 'react'\nimport { BackgroundColorProperty } from 'csstype'\nimport { Reveal, Tween } from 'react-gsap'\n\nimport { Card } from '../Card'\nimport { Flex } from '../../../Flex'\nimport { DynamicIcon } from '../../../DynamicIcon'\nimport { DateFormatted } from '../../../DateFormatted'\nimport { ExperienceCardHeader } from './ExperienceCardHeader'\nimport { ExperienceCardHeaderText } from './ExperienceCardHeaderText'\nimport { CardBody } from '../CardBody'\nimport { CardHeaderIconWrapper } from '../CardHeaderIconWrapper'\n\ninterface IExperienceCardProps {\n  index: number\n  name: string\n  type: string\n  icon: string\n  dateStart: string\n  dateEnd: string\n  description: string\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const ExperienceCard: (props: IExperienceCardProps) => JSX.Element = ({\n  // index,\n  name,\n  type,\n  icon,\n  dateStart,\n  dateEnd,\n  description,\n  backgroundColor,\n}: IExperienceCardProps): JSX.Element => (\n  <Reveal>\n    <Tween\n      from={{ width: '8rem', height: '8rem' }}\n      to={{ width: '100%', height: 'auto' }}\n      duration={0.75}\n      ease={'power4'}\n    >\n      <Card>\n        <ExperienceCardHeader>\n          <Flex justifyContent=\"flex-start\">\n            <CardHeaderIconWrapper backgroundColor={backgroundColor}>\n              <DynamicIcon path={icon} />\n            </CardHeaderIconWrapper>\n            <Tween from={{ display: 'none' }} delay={1}>\n              <ExperienceCardHeaderText>\n                <h1>\n                  {name} ({type})\n                </h1>\n                <h2>\n                  <DateFormatted dateString={dateStart} /> -{' '}\n                  <DateFormatted dateString={dateEnd} />\n                </h2>\n              </ExperienceCardHeaderText>\n            </Tween>\n          </Flex>\n        </ExperienceCardHeader>\n        <CardBody>\n          <Tween from={{ display: 'none' }} delay={1}>\n            <main>\n              <p>{description}</p>\n            </main>\n          </Tween>\n        </CardBody>\n      </Card>\n    </Tween>\n  </Reveal>\n)\n","import React from 'react'\n\nimport {\n  IExperienceEdge,\n  IExperienceAllMarkdownRemark,\n} from '../../../../types/interfaces'\n\nimport { ExperienceCard } from './ExperienceCard'\n\nexport function ExperienceCards({\n  edges,\n}: IExperienceAllMarkdownRemark): JSX.Element {\n  return (\n    <>\n      {edges.map(\n        (\n          { node: { frontmatter } }: IExperienceEdge,\n          i: number\n        ): JSX.Element => (\n          <ExperienceCard\n            name={frontmatter.title}\n            type={frontmatter.type}\n            description={frontmatter.excerpt}\n            icon={`icons/${frontmatter.title.toLocaleLowerCase()}_logo.png`}\n            backgroundColor={frontmatter.backgroundColor}\n            dateStart={frontmatter.dateStart}\n            dateEnd={frontmatter.dateEnd}\n            key={i}\n            index={i}\n          />\n        )\n      )}\n    </>\n  )\n}\n","import React from 'react'\n\nimport {\n  IExperienceAllMarkdownRemark,\n  ISkillsetAllMarkdownRemark,\n} from '../types/interfaces'\n\nimport { SEO } from '../components/compositions/SEO'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Grid } from '../components/Grid'\nimport { ContentSeparator } from '../components/ContentSeparator'\nimport { SkillCards } from '../components/compositions/card/skillcard/SkillCards'\nimport { ExperienceCards } from '../components/compositions/card/experiencecard/ExperienceCards'\nimport { ExperienceCard } from '../components/compositions/card/experiencecard/ExperienceCard'\n\nexport interface ISkillsetLayoutProps {\n  skillsetData: ISkillsetAllMarkdownRemark\n  experienceData: IExperienceAllMarkdownRemark\n}\n\nexport function SkillsetLayout({\n  skillsetData,\n  experienceData,\n}: ISkillsetLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO\n        title=\"Skillset\"\n        description=\"This is my trying to provide you with an indication about my capabilities & goals looking forward\"\n      />\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>This is what I have worked with</h1>\n          <p>\n            A rough estimation of the total time I've spent on everything is\n            included.\n          </p>\n        </ContentSeparator>\n      </CenteredBlock>\n      <ContentSeparator>\n        <Grid columns=\"repeat(auto-fill, minmax(25rem, 1fr))\" maxWidth=\"160rem\">\n          <SkillCards edges={skillsetData.edges} />\n        </Grid>\n      </ContentSeparator>\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>Education</h1>\n          <ExperienceCard\n            name=\"Digital Media & Communication\"\n            type=\"HBO\"\n            icon=\"icons/hu_logo.jpg\"\n            dateStart=\"2015-09-05\"\n            dateEnd=\"2019-02-04\"\n            description=\"This is where my interest in programming started, as well as my first steps into graphic design. I learned about marketing and doing user research. Halfway through my final year I decided to drop out due to lack of motivation as I wanted to pursue learning more about programming.\"\n            backgroundColor=\"#298CCD\"\n            index={0}\n          />\n        </ContentSeparator>\n        <ContentSeparator>\n          <h1>Professional experience</h1>\n          <Grid>\n            <ExperienceCards edges={experienceData.edges} />\n          </Grid>\n        </ContentSeparator>\n      </CenteredBlock>\n    </>\n  )\n}\n","import styled, {\n  StyledComponent,\n  FlattenSimpleInterpolation,\n  css,\n} from 'styled-components'\n\ninterface ICardFooterProps {\n  style?: boolean\n}\n\nexport const CardFooter: StyledComponent<\n  'footer',\n  any,\n  ICardFooterProps,\n  never\n> = styled.footer`\n  ${({ style = false }: ICardFooterProps): FlattenSimpleInterpolation =>\n    style\n      ? css`\n          background: #eee;\n          padding: 2rem;\n          border-top: 1px solid #ddd;\n          grid-area: footer;\n        `\n      : css`\n          padding: 0 2rem 2rem;\n        `}\n`\n","import React from 'react'\nimport { graphql, StaticQuery } from 'gatsby'\n\nimport { CONTACTS } from '../data/contacts'\n\nimport { AboutLayout, IAboutLayoutProps } from '../layouts/AboutLayout'\nimport { ContactLayout } from '../layouts/ContactLayout'\nimport { IProjectsLayoutProps, ProjectsLayout } from '../layouts/ProjectsLayout'\nimport { ISkillsetLayoutProps, SkillsetLayout } from '../layouts/SkillSetLayout'\nimport { Layout } from '../components/Layout'\n\n// tslint:disable-next-line: no-void-expression\nconst PAGE_QUERY: void = graphql`\n  fragment SharedOPQuery on MarkdownRemarkConnection {\n    edges {\n      node {\n        frontmatter {\n          favorite\n          path\n          category\n          title\n          featuredVideo\n          featuredImage {\n            childImageSharp {\n              fluid(maxWidth: 960) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          excerpt\n          tags\n          date\n        }\n        wordCount {\n          words\n          sentences\n          paragraphs\n        }\n        timeToRead\n        excerpt\n        id\n      }\n    }\n  }\n\n  query {\n    programmingData: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          path: { regex: \"/projects/\" }\n          category: { eq: \"Programming\" }\n        }\n      }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      ...SharedOPQuery\n    }\n\n    graphicDesignData: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          path: { regex: \"/projects/\" }\n          category: { eq: \"Graphic Design\" }\n        }\n      }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      ...SharedOPQuery\n    }\n\n    experienceData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/experiences/\" } } }\n      sort: { fields: frontmatter___dateEnd }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            dateStart\n            dateEnd\n            backgroundColor\n            type\n          }\n          excerpt\n        }\n      }\n    }\n\n    skillsetData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/tag/\" } } }\n      sort: { fields: frontmatter___time, order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            level\n            skillColor\n            time\n          }\n          excerpt\n        }\n      }\n    }\n\n    wallpapers: allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(png)|(jpeg)/\" }\n        relativeDirectory: { regex: \"/bio/games/\" }\n      }\n      limit: 14\n    ) {\n      edges {\n        node {\n          name\n          relativePath\n          childImageSharp {\n            fluid(maxWidth: 960, maxHeight: 540, cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    squares: allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(png)|(jpeg)/\" }\n        relativeDirectory: { regex: \"/photography/\" }\n      }\n      limit: 9\n    ) {\n      edges {\n        node {\n          name\n          relativePath\n          childImageSharp {\n            fluid(maxWidth: 240, maxHeight: 240, cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    posters: allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(png)|(jpeg)/\" }\n        relativeDirectory: { regex: \"/bio/series/\" }\n      }\n      limit: 28\n    ) {\n      edges {\n        node {\n          name\n          relativePath\n          childImageSharp {\n            fluid(maxWidth: 270, maxHeight: 480, cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nfunction ProjectsPage(): JSX.Element {\n  return (\n    <Layout>\n      <StaticQuery\n        query={PAGE_QUERY}\n        render={({\n          programmingData,\n          graphicDesignData,\n          experienceData,\n          skillsetData,\n          posters,\n          squares,\n          wallpapers,\n        }: IProjectsLayoutProps &\n          ISkillsetLayoutProps &\n          IAboutLayoutProps): JSX.Element => (\n          <>\n            <AboutLayout\n              posters={posters}\n              wallpapers={wallpapers}\n              squares={squares}\n            />\n            <ProjectsLayout\n              programmingData={programmingData}\n              graphicDesignData={graphicDesignData}\n            />\n            <SkillsetLayout\n              skillsetData={skillsetData}\n              experienceData={experienceData}\n            />\n            <ContactLayout contacts={CONTACTS} />\n          </>\n        )}\n      />\n    </Layout>\n  )\n}\n\n// tslint:disable-next-line: no-default-export\nexport default ProjectsPage\n","import { BackgroundColorProperty } from 'csstype'\n\nexport interface IContact {\n  background: BackgroundColorProperty\n  iconPath: string\n  href: string\n  text: string\n}\n\nexport const CONTACTS: IContact[] = [\n  {\n    background: '#000000',\n    iconPath: 'icons/email.png',\n    href: 'mailto://casimir.db@outlook.com',\n    text: 'Mail',\n  },\n  {\n    background: '#007AB9',\n    iconPath: 'icons/linkedin.png',\n    href: 'https://www.linkedin.com/in/casimir-de-bruijn-309990161/',\n    text: 'LinkedIn',\n  },\n  {\n    background: '#8C9EFF',\n    iconPath: 'icons/discord.png',\n    href: 'https://discordapp.com/users/187303558599671808',\n    text: 'Discord',\n  },\n]\n","import React from 'react'\nimport { Reveal } from 'react-gsap'\n\nimport { Grid } from '../components/Grid'\nimport { IProjectsAllMarkdownRemark } from '../types/interfaces'\nimport { SEO } from '../components/compositions/SEO'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { ContentSeparator } from '../components/ContentSeparator'\nimport { ProjectCards } from '../components/compositions/card/projectcard/ProjectCards'\n\nexport interface IProjectsLayoutProps {\n  programmingData: IProjectsAllMarkdownRemark\n  graphicDesignData: IProjectsAllMarkdownRemark\n}\n\nexport function ProjectsLayout({\n  programmingData,\n  graphicDesignData,\n}: IProjectsLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO title=\"Projects\" description=\"These are some projects I did\" />\n      <ContentSeparator>\n        <CenteredBlock>\n          <h1>Hey! These are some of my projects</h1>\n          <p>\n            In chronological order, from newest to oldest. These are some\n            projects I worked on that I am proud of, that taught me a lot and /\n            or got me some decent grades.\n          </p>\n        </CenteredBlock>\n        <Grid\n          columns={'repeat(auto-fill, minmax(32rem,1fr))'}\n          maxWidth={'100rem'}\n        >\n          <Reveal>\n            <ProjectCards edges={programmingData.edges} />\n          </Reveal>\n        </Grid>\n      </ContentSeparator>\n      <ContentSeparator>\n        <CenteredBlock>\n          <h1>I have also done some Graphic Design stuff</h1>\n          <p>\n            Not everything in here has to do with programming. I also included\n            some projects I made using Adobe Illustrator and After Effects. The\n            first projects were part of courses in a timeframe of about 10\n            weeks. That meant going from 0 - 100 in roughly 10 weeks, allocating\n            time for other courses as well (about 4 at a time).\n          </p>\n        </CenteredBlock>\n        <Grid\n          columns={'repeat(auto-fill, minmax(32rem,1fr))'}\n          maxWidth={'100rem'}\n        >\n          <Reveal>\n            <ProjectCards edges={graphicDesignData.edges} />\n          </Reveal>\n        </Grid>\n      </ContentSeparator>\n    </>\n  )\n}\n","import styled, { StyledComponent } from 'styled-components'\n\nexport const CardHeaderText: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding: 2em 2em 0 2em;\n\n  & > h6 {\n    margin-bottom: 0;\n  }\n`\n"],"sourceRoot":""}