{"version":3,"sources":["webpack:///./src/layouts/ContactLayout.tsx","webpack:///./src/layouts/SkillSetLayout.tsx","webpack:///./src/pages/onepage.tsx","webpack:///./src/layouts/ProjectsLayout.tsx"],"names":["ContactLayout","contacts","title","columns","rows","map","key","background","iconPath","href","text","SkillsetLayout","skillsetData","experienceData","description","maxWidth","edges","i","frontmatter","node","level","excerpt","time","index","skillColor","name","type","icon","dateStart","dateEnd","backgroundColor","toLocaleLowerCase","CONTACTS","ProjectsPage","query","render","programmingData","graphicDesignData","posters","squares","wallpapers","ProjectsLayout","from","opacity","timeToRead","tags","video","featuredVideo","image","featuredImage","body","path","date"],"mappings":"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","file":"component---src-pages-onepage-tsx-c2a8e244515482344db7.js","sourcesContent":["import React from 'react'\nimport { SEO } from '../components/SEO'\nimport { Grid } from '../components/Grid'\nimport { SocialButton } from '../components/SocialButton'\nimport { CenteredBlock } from '../components/CenteredBlock'\n\nimport { BackgroundColorProperty } from 'csstype'\n\nexport interface IContact {\n  background: BackgroundColorProperty\n  iconPath: string\n  href: string\n  text: string\n}\n\nexport interface IContactLayoutProps {\n  contacts: IContact[]\n}\n\nexport function ContactLayout({ contacts }: IContactLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO\n        title=\"Contact\"\n        // description=\"Get in touch with me through some social links\"\n      />\n      <CenteredBlock>\n        <h1>Get in touch!</h1>\n        <p>\n          I don't do Twitter and I don't really use Facebook other than checking\n          it about twice a year. However, there are other ways to get in touch\n          with me. I don't have a fancy form (yet), but that shouldn't be a\n          dealbreaker. I check my mail at least once a day, LinkedIn weekly and\n          I'm pretty much always available on Discord. You just do whatever\n          feels right ðŸ˜‰.\n        </p>\n        <Grid columns={3} rows={1}>\n          {contacts.map(\n            (\n              { background, iconPath, href, text }: IContact,\n              key: number\n            ): JSX.Element => (\n              <SocialButton\n                background={background}\n                iconPath={iconPath}\n                href={href}\n                key={key}\n              >\n                {text}\n              </SocialButton>\n            )\n          )}\n        </Grid>\n      </CenteredBlock>\n    </>\n  )\n}\n","import React from 'react'\nimport { SEO } from '../components/SEO'\nimport { SkillCard } from '../components/SkillCard'\nimport { ExperienceCard } from '../components/ExperienceCard'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Grid } from '../components/Grid'\nimport {\n  IExperienceAllMarkdownRemark,\n  IExperienceEdge,\n  ISkillsetAllMarkdownRemark,\n  ISkillsetEdge,\n} from '../templates/interfaces'\nimport { ContentSeparator } from '../components/ContentSeparator'\n\nexport interface ISkillsetLayoutProps {\n  skillsetData: ISkillsetAllMarkdownRemark\n  experienceData: IExperienceAllMarkdownRemark\n}\n\nexport function SkillsetLayout({\n  skillsetData,\n  experienceData,\n}: ISkillsetLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO\n        title=\"Skillset\"\n        description=\"This is my trying to provide you with an indication about my capabilities & goals looking forward\"\n      />\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>This is what I have worked with</h1>\n          <p>\n            A rough estimation of the total time I've spent on everything is\n            included.\n          </p>\n        </ContentSeparator>\n      </CenteredBlock>\n      <ContentSeparator>\n        <Grid columns=\"repeat(auto-fill, minmax(25rem, 1fr))\" maxWidth=\"160rem\">\n          {skillsetData.edges.map(\n            (\n              { node: { frontmatter } }: ISkillsetEdge,\n              i: number\n            ): JSX.Element => (\n              <SkillCard\n                level={frontmatter.level || 0}\n                title={frontmatter.title}\n                description={frontmatter.excerpt}\n                time={frontmatter.time}\n                key={i}\n                index={i}\n                skillColor={frontmatter.skillColor}\n              />\n            )\n          )}\n        </Grid>\n      </ContentSeparator>\n      <CenteredBlock>\n        <ContentSeparator>\n          <h1>Education</h1>\n          <ExperienceCard\n            name=\"Digital Media & Communication\"\n            type=\"HBO\"\n            icon=\"icons/hu_logo.jpg\"\n            dateStart=\"2015-09-05\"\n            dateEnd=\"2019-02-04\"\n            description=\"This is where my interest in programming started, as well as my first steps into graphic design. I learned about marketing and doing user research. Halfway through my final year I decided to drop out due to lack of motivation as I wanted to pursue learning more about programming.\"\n            backgroundColor=\"#298CCD\"\n            index={0}\n          />\n        </ContentSeparator>\n        <ContentSeparator>\n          <h1>Professional experience</h1>\n          <Grid>\n            {experienceData.edges.map(\n              (\n                { node: { frontmatter } }: IExperienceEdge,\n                i: number\n              ): JSX.Element => (\n                <ExperienceCard\n                  name={frontmatter.title}\n                  type={frontmatter.type}\n                  description={frontmatter.excerpt}\n                  icon={`icons/${frontmatter.title.toLocaleLowerCase()}_logo.png`}\n                  backgroundColor={frontmatter.backgroundColor}\n                  dateStart={frontmatter.dateStart}\n                  dateEnd={frontmatter.dateEnd}\n                  key={i}\n                  index={i}\n                />\n              )\n            )}\n          </Grid>\n        </ContentSeparator>\n      </CenteredBlock>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutLayout, IAboutLayoutProps } from '../layouts/AboutLayout'\nimport { ContactLayout, IContact } from '../layouts/ContactLayout'\nimport { graphql, StaticQuery } from 'gatsby'\nimport { IProjectsLayoutProps, ProjectsLayout } from '../layouts/ProjectsLayout'\nimport { ISkillsetLayoutProps, SkillsetLayout } from '../layouts/SkillSetLayout'\nimport { Layout } from '../components/Layout'\n\n// tslint:disable-next-line: no-void-expression\nconst PAGE_QUERY: void = graphql`\n  fragment SharedOPQuery on MarkdownRemarkConnection {\n    edges {\n      node {\n        frontmatter {\n          favorite\n          path\n          category\n          title\n          featuredVideo\n          featuredImage {\n            childImageSharp {\n              fluid(maxWidth: 960) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          excerpt\n          tags\n          date\n        }\n        wordCount {\n          words\n          sentences\n          paragraphs\n        }\n        timeToRead\n        excerpt\n        id\n      }\n    }\n  }\n\n  query {\n    programmingData: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          path: { regex: \"/projects/\" }\n          category: { eq: \"Programming\" }\n        }\n      }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      ...SharedOPQuery\n    }\n\n    graphicDesignData: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          path: { regex: \"/projects/\" }\n          category: { eq: \"Graphic Design\" }\n        }\n      }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      ...SharedOPQuery\n    }\n\n    experienceData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/experiences/\" } } }\n      sort: { fields: frontmatter___dateEnd }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            dateStart\n            dateEnd\n            backgroundColor\n            type\n          }\n          excerpt\n        }\n      }\n    }\n\n    skillsetData: allMarkdownRemark(\n      filter: { frontmatter: { path: { regex: \"/tag/\" } } }\n      sort: { fields: frontmatter___time, order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            level\n            skillColor\n            time\n          }\n          excerpt\n        }\n      }\n    }\n\n    wallpapers: allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(png)|(jpeg)/\" }\n        relativeDirectory: { regex: \"/bio/games/\" }\n      }\n      limit: 14\n    ) {\n      edges {\n        node {\n          name\n          relativePath\n          childImageSharp {\n            fluid(maxWidth: 960, maxHeight: 540, cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    squares: allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(png)|(jpeg)/\" }\n        relativeDirectory: { regex: \"/photography/\" }\n      }\n      limit: 9\n    ) {\n      edges {\n        node {\n          name\n          relativePath\n          childImageSharp {\n            fluid(maxWidth: 240, maxHeight: 240, cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    posters: allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(png)|(jpeg)/\" }\n        relativeDirectory: { regex: \"/bio/series/\" }\n      }\n      limit: 28\n    ) {\n      edges {\n        node {\n          name\n          relativePath\n          childImageSharp {\n            fluid(maxWidth: 270, maxHeight: 480, cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst CONTACTS: IContact[] = [\n  {\n    background: '#000000',\n    iconPath: 'icons/email.png',\n    href: 'mailto://casimir.db@outlook.com',\n    text: 'Mail',\n  },\n  {\n    background: '#007AB9',\n    iconPath: 'icons/linkedin.png',\n    href: 'https://www.linkedin.com/in/casimir-de-bruijn-309990161/',\n    text: 'LinkedIn',\n  },\n  {\n    background: '#8C9EFF',\n    iconPath: 'icons/discord.png',\n    href: 'https://discordapp.com/users/187303558599671808',\n    text: 'Discord',\n  },\n]\n\nconst ProjectsPage: () => JSX.Element = (): JSX.Element => {\n  return (\n    <Layout>\n      <StaticQuery\n        query={PAGE_QUERY}\n        render={({\n          programmingData,\n          graphicDesignData,\n          experienceData,\n          skillsetData,\n          posters,\n          squares,\n          wallpapers,\n        }: IProjectsLayoutProps &\n          ISkillsetLayoutProps &\n          IAboutLayoutProps): JSX.Element => (\n          <>\n            <AboutLayout\n              posters={posters}\n              wallpapers={wallpapers}\n              squares={squares}\n            />\n            <ProjectsLayout\n              programmingData={programmingData}\n              graphicDesignData={graphicDesignData}\n            />\n            <SkillsetLayout\n              skillsetData={skillsetData}\n              experienceData={experienceData}\n            />\n            <ContactLayout contacts={CONTACTS} />\n          </>\n        )}\n      />\n    </Layout>\n  )\n}\n\n// tslint:disable-next-line: no-default-export\nexport default ProjectsPage\n","import React from 'react'\nimport { Grid } from '../components/Grid'\nimport { IEdge, IProjectsAllMarkdownRemark } from '../templates/interfaces'\nimport { ProjectCard } from '../components/ProjectCard'\nimport { SEO } from '../components/SEO'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { ContentSeparator } from '../components/ContentSeparator'\nimport { Reveal, Tween } from 'react-gsap'\n\nexport interface IProjectsLayoutProps {\n  programmingData: IProjectsAllMarkdownRemark\n  graphicDesignData: IProjectsAllMarkdownRemark\n}\n\nexport function ProjectsLayout({\n  programmingData,\n  graphicDesignData,\n}: IProjectsLayoutProps): JSX.Element {\n  return (\n    <>\n      <SEO title=\"Projects\" description=\"These are some projects I did\" />\n      <ContentSeparator>\n        <CenteredBlock>\n          <h1>Hey! These are some of my projects</h1>\n          <p>\n            In chronological order, from newest to oldest. These are some\n            projects I worked on that I am proud of, that taught me a lot and /\n            or got me some decent grades.\n          </p>\n        </CenteredBlock>\n        <Grid\n          columns={'repeat(auto-fill, minmax(32rem,1fr))'}\n          maxWidth={'100rem'}\n        >\n          <Reveal>\n            <Tween from={{ opacity: 0 }}>\n              {programmingData.edges.map(\n                (\n                  { node: { frontmatter, timeToRead } }: IEdge,\n                  i: number\n                ): JSX.Element => (\n                  <ProjectCard\n                    title={frontmatter.title}\n                    tags={frontmatter.tags}\n                    video={frontmatter.featuredVideo}\n                    image={frontmatter.featuredImage}\n                    body={frontmatter.excerpt}\n                    timeToRead={timeToRead}\n                    path={frontmatter.path}\n                    date={frontmatter.date}\n                    key={i}\n                    index={i}\n                  />\n                )\n              )}\n            </Tween>\n          </Reveal>\n        </Grid>\n      </ContentSeparator>\n      <ContentSeparator>\n        <CenteredBlock>\n          <h1>I have also done some Graphic Design stuff</h1>\n          <p>\n            Not everything in here has to do with programming. I also included\n            some projects I made using Adobe Illustrator and After Effects. The\n            first projects were part of courses in a timeframe of about 10\n            weeks. That meant going from 0 - 100 in roughly 10 weeks, allocating\n            time for other courses as well (about 4 at a time).\n          </p>\n        </CenteredBlock>\n        <Grid\n          columns={'repeat(auto-fill, minmax(32rem,1fr))'}\n          maxWidth={'100rem'}\n        >\n          <Reveal>\n            <Tween from={{ opacity: 0 }}>\n              {graphicDesignData.edges.map(\n                (\n                  { node: { frontmatter, timeToRead } }: IEdge,\n                  i: number\n                ): JSX.Element => (\n                  <ProjectCard\n                    title={frontmatter.title}\n                    tags={frontmatter.tags}\n                    video={frontmatter.featuredVideo}\n                    image={frontmatter.featuredImage}\n                    body={frontmatter.excerpt}\n                    timeToRead={timeToRead}\n                    path={frontmatter.path}\n                    date={frontmatter.date}\n                    key={i}\n                    index={i}\n                  />\n                )\n              )}\n            </Tween>\n          </Reveal>\n        </Grid>\n      </ContentSeparator>\n    </>\n  )\n}\n"],"sourceRoot":""}