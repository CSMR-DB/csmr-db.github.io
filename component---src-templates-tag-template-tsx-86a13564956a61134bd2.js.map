{"version":3,"sources":["webpack:///./src/templates/TagTemplate.tsx"],"names":["ProjectTemplate","data","allMarkdownRemark","markdownRemark","edges","skillColor","frontmatter","index","level","title","description","excerpt","time","columns","maxWidth","length","map","i","node","tags","date","featuredImage","featuredVideo","path","timeToRead","body","key","image","video","pageQuery"],"mappings":"4FAAA,0LAiBe,SAASA,EAAT,GAE8D,IAD3EC,EAC2E,EAD3EA,KAGEC,EAG0BD,EAH1BC,kBACAC,EAE0BF,EAF1BE,eAGMC,EAA8BF,EAA9BE,MAER,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGD,EACC,kBAAC,IAAD,CACEE,WAAYF,EAAeG,YAAYD,YAAc,QACrDE,MAAO,EACPC,MAAOL,EAAeG,YAAYE,OAAS,EAC3CC,MAAON,EAAeG,YAAYG,MAClCC,YAAaP,EAAeG,YAAYK,QACxCC,KAAMT,EAAeG,YAAYM,OAGnC,kBAAC,IAAD,CACEP,WAAY,QACZE,MAAO,EACPC,MAAO,EACPC,MAAO,cACPC,YAAY,kBAKpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,QAAS,sCACTC,SAAU,UAETV,EAAMW,OAAS,GACdX,EAAMY,KACJ,WAeEC,GAfF,QAEIC,KAFJ,IAGMZ,YACEa,EAJR,EAIQA,KACAV,EALR,EAKQA,MACAW,EANR,EAMQA,KACAT,EAPR,EAOQA,QACAU,EARR,EAQQA,cACAC,EATR,EASQA,cACAC,EAVR,EAUQA,KAEFC,EAZN,EAYMA,WAZN,OAiBE,kBAAC,IAAD,CACEC,KAAMd,EACNF,MAAOA,EACPiB,IAAKT,EACLV,MAAOU,EACPE,KAAMA,EACNC,KAAMA,EACNO,MAAON,EACPO,MAAON,EACPC,KAAMA,EACNC,WAAYA,UAWvB,IAAMK,EAAkB","file":"component---src-templates-tag-template-tsx-86a13564956a61134bd2.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Layout } from '../components/Layout'\nimport {\n  IListItemData,\n  IAllMarkdownRemark,\n  IEdge,\n  ISingleItemData,\n  IProjectsAllMarkdownRemark,\n} from './interfaces'\nimport { ProjectCard } from '../components/ProjectCard'\nimport { Grid } from '../components/Grid'\nimport { ContentSeparator } from '../components/ContentSeparator'\nimport { SkillCard } from '../components/SkillCard'\nimport { CenteredBlock } from '../components/CenteredBlock'\n\n// tslint:disable-next-line: no-default-export\nexport default function ProjectTemplate({\n  data, // this prop will be injected by the GraphQL query below.\n}: IListItemData<IProjectsAllMarkdownRemark> & ISingleItemData): JSX.Element {\n  const {\n    allMarkdownRemark,\n    markdownRemark,\n  }: IListItemData<IProjectsAllMarkdownRemark>['data'] &\n    ISingleItemData['data'] = data // data.markdownRemark holds our post data\n  const { edges }: IAllMarkdownRemark = allMarkdownRemark\n\n  return (\n    <Layout>\n      <ContentSeparator>\n        <CenteredBlock>\n          {markdownRemark ? (\n            <SkillCard\n              skillColor={markdownRemark.frontmatter.skillColor || 'black'}\n              index={0}\n              level={markdownRemark.frontmatter.level || 0}\n              title={markdownRemark.frontmatter.title}\n              description={markdownRemark.frontmatter.excerpt}\n              time={markdownRemark.frontmatter.time}\n            />\n          ) : (\n            <SkillCard\n              skillColor={'black'}\n              index={0}\n              level={0}\n              title={'Placeholder'}\n              description=\"Description\"\n            />\n          )}\n        </CenteredBlock>\n      </ContentSeparator>\n      <ContentSeparator>\n        <Grid\n          columns={'repeat(auto-fill,minmax(32rem,1fr))'}\n          maxWidth={'100rem'}\n        >\n          {edges.length > 0 &&\n            edges.map(\n              (\n                {\n                  node: {\n                    frontmatter: {\n                      tags,\n                      title,\n                      date,\n                      excerpt,\n                      featuredImage,\n                      featuredVideo,\n                      path,\n                    },\n                    timeToRead,\n                  },\n                }: IEdge,\n                i: number\n              ): JSX.Element => (\n                <ProjectCard\n                  body={excerpt}\n                  title={title}\n                  key={i}\n                  index={i}\n                  tags={tags}\n                  date={date}\n                  image={featuredImage}\n                  video={featuredVideo}\n                  path={path}\n                  timeToRead={timeToRead}\n                />\n              )\n            )}\n        </Grid>\n      </ContentSeparator>\n    </Layout>\n  )\n}\n\n// tslint:disable-next-line: no-void-expression\nexport const pageQuery: void = graphql`\n  query($tag: String!) {\n    allMarkdownRemark(filter: { frontmatter: { tags: { in: [$tag] } } }) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            excerpt\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 960) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            featuredVideo\n            date\n            tags\n          }\n          wordCount {\n            words\n            sentences\n            paragraphs\n          }\n          timeToRead\n          excerpt\n          id\n          html\n        }\n      }\n    }\n\n    markdownRemark(frontmatter: { title: { eq: $tag } }) {\n      frontmatter {\n        path\n        title\n        excerpt\n        level\n        time\n        skillColor\n      }\n    }\n  }\n`\n"],"sourceRoot":""}