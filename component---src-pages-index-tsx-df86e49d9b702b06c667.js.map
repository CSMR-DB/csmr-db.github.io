{"version":3,"sources":["webpack:///./src/components/blend.tsx","webpack:///./src/components/StyledLink.tsx","webpack:///./src/components/Fixed.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/dynamicimage.tsx"],"names":["StyledDiv","styled","div","props","isolation","mode","hoverMode","Blend","children","StyledLink","Link","color","FixedElement","Fixed","MenuTile","blendMode","imagePath","to","background","title","path","IndexPage","size","strokeColor","strokeSize","fill","height","rows","columns","routes","map","route","DynamicImage","query","render","file","images","edges","find","image","node","relativePath","fluid","childImageSharp"],"mappings":"k0BAWA,IAAMA,EAAwDC,IAAOC,IAAV,KAE5C,SAACC,GAAD,OAAoBA,EAAMC,UAAY,UAAY,UAY3C,SAACD,GAAD,OAAmBA,EAAME,QAQvB,SAACF,GAAD,OAAmBA,EAAMG,WAAaH,EAAME,QAWrDE,EAND,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUH,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,UAAnB,IAA8BF,iBAA9B,gBACZ,kBAACJ,EAAD,CAAWK,KAAMA,EAAMD,UAAWA,EAAWE,UAAWA,GACrDE,I,iLChCE,IAAMC,EAAaR,YAAOS,IAAPT,CAAH,KAEZ,SAACE,GAAD,OAA6BA,EAAMQ,OAAS,mB,6RCHvD,IAAMC,EAAeX,IAAOC,IAAV,KAWLW,EAAQ,SAAC,GAAD,IAAGL,EAAH,EAAGA,SAAH,OACnB,kBAACI,EAAD,KAAeJ,I,kBCCXM,EAAW,SAAC,GAAD,IACfC,EADe,EACfA,UACAC,EAFe,EAEfA,UACAC,EAHe,EAGfA,GACAC,EAJe,EAIfA,WACAC,EALe,EAKfA,MALe,OAOf,kBAAC,EAAD,CAAOd,KAAMU,EAAWX,WAAW,GACjC,kBAAC,IAAD,CAAcgB,KAAMJ,IACpB,kBAACP,EAAD,CAAYE,MAAM,QAAQM,GAAIA,GAC5B,kBAAC,IAAD,CAAMC,WAAYA,GAChB,4BAAKC,OAiCEE,UA3BG,kBAChB,6BACE,kBAAC,IAAD,CAAKF,MAAM,aACX,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,KAAM,IACNC,YAAY,QACZC,WAAY,EACZC,KAAK,kBAIX,kBAAC,IAAD,CAAMC,OAAO,QAAQC,KAAM,EAAGC,QAAS,GACpCC,IAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,CACEhB,UAAU,UACVC,UAAU,eACVC,GAAIc,EAAMX,KACVF,WAAW,sBACXC,MAAOY,EAAMZ,e,gGCERa,IArCM,YAAuC,IAA5BZ,EAA4B,EAA5BA,KAC9B,OACE,kBAAC,IAAD,CACEa,MAAK,aAmBLC,OAAQ,gBA9BOC,EA8BJC,EAAH,EAAGA,OAAH,OA9BOD,EAgCXC,EAAOC,MAAMC,MACX,SAACC,GAAD,OAAwBA,EAAMC,KAAKC,eAAiBrB,KAhCvD,kBAAC,IAAD,CAAKsB,MAAOP,EAAKK,KAAKG,gBAAgBD,SAS3C,W","file":"component---src-pages-index-tsx-df86e49d9b702b06c667.js","sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { MixBlendModeProperty } from 'csstype'\n\ninterface IBlend {\n  children: ReactNode\n  mode: MixBlendModeProperty\n  hoverMode?: MixBlendModeProperty\n  isolation?: boolean\n}\n\nconst StyledDiv: StyledComponent<'div', any, IBlend, never> = styled.div`\n  position: relative;\n  isolation: ${(props: IBlend) => (props.isolation ? 'isolate' : 'auto')};\n  overflow: hidden; /** to make sure the containing element has no children overlapping parent's sibling elements */\n\n  & > :first-child {\n    position: relative !important;\n  }\n\n  :hover > :first-child {\n    transform: scale(1.1);\n  }\n\n  & > * {\n    mix-blend-mode: ${(props: IBlend) => props.mode};\n    position: absolute !important; /** to work with gatsby-image, adding !important is a required override */\n    width: 100%;\n    height: 100%;\n    top: 0;\n    transition: all 0.25s ease-in-out;\n\n    :hover {\n      mix-blend-mode: ${(props: IBlend) => props.hoverMode || props.mode};\n    }\n  }\n`\n\nconst Blend = ({ children, mode, hoverMode, isolation = false }: IBlend) => (\n  <StyledDiv mode={mode} isolation={isolation} hoverMode={hoverMode}>\n    {children}\n  </StyledDiv>\n)\n\nexport default Blend\n","import styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { ColorProperty } from 'csstype'\n\ninterface IStyledLinkProps {\n  color?: ColorProperty\n}\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: ${(props: IStyledLinkProps) => props.color || 'rebeccapurple'};\n`\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface IFixed {\n  children: ReactNode\n}\n\nconst FixedElement = styled.div`\n  position: fixed;\n  width: 16em;\n  height: 16em;\n  top: calc(50% - 8em);\n  left: calc(50% - 8em);\n  z-index: 999;\n  background: rebeccapurple;\n  border-radius: 999em;\n`\n\nexport const Fixed = ({ children }: IFixed) => (\n  <FixedElement>{children}</FixedElement>\n)\n","import React from 'react'\nimport SEO from '../components/seo'\nimport DynamicImage from '../components/dynamicimage'\nimport Blend from '../components/blend'\nimport Flex from '../components/flex'\nimport { Grid } from '../components/grid'\nimport { StyledLink } from '../components/StyledLink'\nimport { Fixed } from '../components/Fixed'\nimport Logo from '../components/logo'\nimport { BlendMode, BackgroundColorProperty } from 'csstype'\nimport { routes } from '../data/routes'\n\ninterface IMenuTileProps {\n  blendMode: BlendMode\n  imagePath: string\n  to: string\n  background: BackgroundColorProperty\n  title: string\n}\n\nconst MenuTile = ({\n  blendMode,\n  imagePath,\n  to,\n  background,\n  title,\n}: IMenuTileProps) => (\n  <Blend mode={blendMode} isolation={true}>\n    <DynamicImage path={imagePath} />\n    <StyledLink color=\"white\" to={to}>\n      <Flex background={background}>\n        <h1>{title}</h1>\n      </Flex>\n    </StyledLink>\n  </Blend>\n)\n\nconst IndexPage = () => (\n  <div>\n    <SEO title=\"Homepage\" />\n    <Fixed>\n      <Flex>\n        <Logo\n          size={192}\n          strokeColor=\"white\"\n          strokeSize={4}\n          fill=\"transparent\"\n        />\n      </Flex>\n    </Fixed>\n    <Grid height=\"100vh\" rows={2} columns={2}>\n      {routes.map(route => (\n        <MenuTile\n          blendMode=\"overlay\"\n          imagePath=\"post/map.jpg\"\n          to={route.path}\n          background=\"rgba(66, 66, 66, 1)\"\n          title={route.title}\n        />\n      ))}\n    </Grid>\n  </div>\n)\n\nexport default IndexPage\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nfunction renderImage(file: IFluidImage) {\n  return <Img fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicImageProps {\n  path: string\n}\n\nconst DynamicImage = function({ path }: IDynamicImageProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 2048) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }) =>\n        renderImage(\n          images.edges.find(\n            (image: IFluidImage) => image.node.relativePath === path\n          ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {â€¦}}\n        )\n      }\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicImage\n"],"sourceRoot":""}