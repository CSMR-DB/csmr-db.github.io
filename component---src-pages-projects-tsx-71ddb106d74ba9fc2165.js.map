{"version":3,"sources":["webpack:///./src/components/StyledIFrame.tsx","webpack:///./src/pages/projects.tsx","webpack:///./src/components/dynamicimage.tsx","webpack:///./src/components/StyledLink.tsx","webpack:///./src/components/Card.tsx"],"names":["StyledIFrame","styled","iframe","Projects","title","Card","path","href","target","width","height","src","frameborder","allow","allowfullscreen","DynamicImage","query","render","images","edges","map","image","i","node","relativePath","includes","file","key","fluid","childImageSharp","StyledLink","Link","props","color","StyledA","a","article","CardHeader","header","CardHeaderText","div","CardHeaderIconWrapper","backgroundColor"],"mappings":"gJAQaA,E,KAKTC,EAAOC,OAAV,mEAAGD,CAAH,iC,kBC2JcE,UA/JE,kBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,uBACX,kEACA,oRAMA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,qDACA,kBAAC,IAAD,CAAcC,KAAK,0BAErB,8aAMyD,IACvD,kBAAC,IAAD,CAASC,KAAK,8BAA8BC,OAAO,SAAnD,UAPF,MAaF,kBAACH,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,2CACA,kBAAC,IAAD,CAAcC,KAAK,mCAErB,6yBAYW,IACT,kBAAC,IAAD,CAASC,KAAK,0CAAd,oBAbF,MAmBF,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,2DACA,kBAACL,EAAD,CACES,MAAM,MACNC,OAAO,MACPC,IAAI,4CACJC,YAAY,IACZC,MAAM,0EACNC,iBAAe,KAGnB,ypBAYF,kBAACT,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,+CACA,kBAAC,IAAD,CAAcC,KAAK,iCAErB,uXAQF,kBAACD,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,gDACA,kBAAC,IAAD,CAAcC,KAAK,4BAErB,6TAKQ,IACN,kBAAC,IAAD,CAASC,KAAK,yDAAd,uBAEW,IARb,6IAaF,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kDACA,kBAACL,EAAD,CACES,MAAM,MACNC,OAAO,MACPC,IAAI,4CACJC,YAAY,IACZC,MAAM,0EACNC,iBAAe,KAGnB,s9BAiBF,kBAACT,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,wCACA,kBAAC,IAAD,CAAcC,KAAK,2BAErB,4hBAQ2B,IACzB,kBAAC,IAAD,CAASC,KAAK,uCAAd,uBATF,S,uGC5ESQ,IA9CM,YAAuC,IAA5BT,EAA4B,EAA5BA,KAC9B,OACE,kBAAC,IAAD,CACEU,MAAK,aAmBLC,OAAQ,YAGN,OAHmC,EAA1BC,OAGKC,MAAMC,KAAI,SAACC,EAAoBC,GAArB,OACtBD,EAAME,KAAKC,eAAiBlB,GAC5Be,EAAME,KAAKC,aAAaC,SAASnB,IAnCtBoB,EAoCKL,OApC+B,KAAjBM,EAoCPL,KApCOK,EAAc,GAC7C,kBAAC,IAAD,CAAKA,IAAKA,EAAKC,MAAOF,EAAKH,KAAKM,gBAAgBD,SAoC3C,KArCd,IAAqBF,EAAmBC,MAUpC,W,iCC9BJ,wFAQaG,EAAa7B,YAAO8B,KAAV,iEAAG9B,CAAH,qCAEZ,SAAC+B,GAAD,OAA6BA,EAAMC,OAAS,mBAG1CC,EAAUjC,IAAOkC,EAAV,0EAAGlC,CAAH,qCAET,SAAC+B,GAAD,OAA6BA,EAAMC,OAAS,oB,k28DCfvD,mJAGa5B,EAAOJ,IAAOmC,QAAV,2DAAGnC,CAAH,sNA2BJoC,EAAapC,IAAOqC,OAAV,uEAAGrC,CAAH,wBAIVsC,EAAiBtC,IAAOuC,IAAV,2EAAGvC,CAAH,uBAQdwC,EAKTxC,IAAOuC,IAAV,kFAAGvC,CAAH,2HAOe,SAAC+B,GAAD,OACZA,EAAMU,iBAAmB","file":"component---src-pages-projects-tsx-71ddb106d74ba9fc2165.js","sourcesContent":["import styled, { StyledComponent } from 'styled-components'\n\ninterface IStyledIFrameProps {\n  frameborder: string\n  allow: string\n  allowfullscreen: boolean\n}\n\nexport const StyledIFrame: StyledComponent<\n  'iframe',\n  any,\n  IStyledIFrameProps,\n  never\n> = styled.iframe`\n  max-width: 100%;\n  border: none;\n`\n","import React from 'react'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport DynamicImage from '../components/dynamicimage'\nimport { StyledIFrame } from '../components/StyledIFrame'\nimport { StyledA } from '../components/StyledLink'\nimport { Card, CardHeader } from '../components/Card'\n\nconst Projects = () => (\n  <Layout>\n    <SEO title=\"My Projects so far\" />\n    <h1>Hey! These are some of my projects</h1>\n    <p>\n      In chronological order. These are some projects I worked on that I am\n      proud of and / or got me some decent grades. Not everything in here has to\n      do with programming. I also included some projects I made using Adobe\n      Illustrator and After Effects.\n    </p>\n    <Card>\n      <CardHeader>\n        <h2>Modern Family Fansite</h2>\n        <DynamicImage path=\"projects/mdrnfml.png\" />\n      </CardHeader>\n      <p>\n        One of the first projects in year one that got me excited about\n        webdevelopment. This project is just purely HTML5 + CSS3. Nothing too\n        fancy, just the base necessities. The only thing that doesn't work is\n        the actor pages. They don't exist due to deadlines at that time. Also,\n        there are no links to the show's social pages. It was just a prototype\n        to show off HTML & CSS. This project can also be found{' '}\n        <StyledA href=\"http://modernfamily.csmr.nl\" target=\"blank\">\n          online\n        </StyledA>\n        .\n      </p>\n    </Card>\n    <Card>\n      <CardHeader>\n        <h2>Cloudcademy</h2>\n        <DynamicImage path=\"projects/cloudcademy_code.png\" />\n      </CardHeader>\n      <p>\n        Cloudcademy was the big course assignment we were to work on to get a\n        final grade. We were just told to make \"a social media platform\" for any\n        subject we wanted. The subject itself didn't matter, as the goal was to\n        learn JavaScript. In this project I chose to focus on jQuery, as it\n        enabled me to get going faster. I made a login system (requirement), a\n        post submission form with a dynamic display of images & videos and\n        stored everything temporarily using the LocalStorage API to allow users\n        to refresh a page and still preserve all the posts that had already been\n        added. This was mainly done by concatenating strings of HTML, as shown\n        in the image. For some reason the project doesn't run 100% properly\n        anymore, so no live demo is available. The source code can still be\n        found in{' '}\n        <StyledA href=\"https://github.com/CSMR-DB/Cloudcademy\">\n          this GitHub repo\n        </StyledA>\n        .\n      </p>\n    </Card>\n    <Card>\n      <CardHeader>\n        <h2>FOMO - Digital Storytelling</h2>\n        <StyledIFrame\n          width=\"960\"\n          height=\"540\"\n          src=\"https://www.youtube.com/embed/ZbANrSn5ZB0\"\n          frameborder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowfullscreen\n        ></StyledIFrame>\n      </CardHeader>\n      <p>\n        In year one we got introduced to After Effects and I instantly fell in\n        love. Soon enough, I found I needed more of a challenge. I wanted to do\n        something in 3D. Through After Effects I found out about Cinema4D, and\n        boy was it fun. I made the scenery in 3D and played around with lighting\n        and camera tracks. The character in the video was animated in 2D, to\n        give something of an \"odd\" feeling when watching it. I liked the style\n        of side-scrolling games, and wanted to try to mimic that effect. The\n        story we tried to tell with this video should be obvious. Disclaimer: I\n        am NOT looking for subs, so don't even bother considering it. ðŸ˜„\n      </p>\n    </Card>\n    <Card>\n      <CardHeader>\n        <h2>Wordpress Theme</h2>\n        <DynamicImage path=\"projects/wpthemeexample.png\" />\n      </CardHeader>\n      <p>\n        At the end of year 1 there was this group project for a local students'\n        guild centered around iceskating. I took the responsibility for the\n        Wordpress website design upon me, learning a bit about the PHP used by\n        Wordpress to develop a theme that fully utilized the Customizer API.\n        Unfortunately, we weren't chosen to publish our design concept.\n      </p>\n    </Card>\n    <Card>\n      <CardHeader>\n        <h2>Abstract Dataviz</h2>\n        <DynamicImage path=\"projects/dataroute.png\" />\n      </CardHeader>\n      <p>\n        During my year 4 minor we had one major assignment: Take any form of\n        data you can find on your route from home to college. I chose mobile\n        network speed, took 20 points of measure, fiddled up some concepts and\n        eventually landed on this very abstract piece. Inspired by the typically\n        Dutch{' '}\n        <StyledA href=\"https://nl.wikipedia.org/wiki/Paddenstoel_(wegwijzer)\">\n          \"route paddenstoel\"\n        </StyledA>{' '}\n        and an ordinary colorful mushroom, flattened as if you were viewing it\n        top-down with the data displayed on it in the LTR writing system.\n      </p>\n    </Card>\n    <Card>\n      <CardHeader>\n        <h2>Video Project VUMC</h2>\n        <StyledIFrame\n          width=\"960\"\n          height=\"540\"\n          src=\"https://www.youtube.com/embed/OYVxTuwnx-c\"\n          frameborder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowfullscreen\n        ></StyledIFrame>\n      </CardHeader>\n      <p>\n        At the end of the year 4 minor there was this big assignment: make a\n        datavisualization for a client according to their needs & requirements.\n        The entire group of students was split up in smaller teams of 3, each\n        working for a different client with different requirements. Our\n        objective: make an animated short, telling the story about our research\n        and findings. One that we could use in schools and one that is\n        interesting for both students and teachers. Make sure to get our message\n        \"we need to come together to find a solution\" across. We created\n        concepts, sketches and discussed ideas about doing a voice-over. We made\n        a version using a voice-over, but were asked to make a version with\n        subtitles instead. I took it upon myself to create the entire animation\n        in After Effects and find a suiting (& free) piece of background music.\n        The end result: a composition with consistency at the center, and smooth\n        transitions to highlight important sections.\n      </p>\n    </Card>\n    <Card>\n      <CardHeader>\n        <h2>PHYX API</h2>\n        <DynamicImage path=\"projects/phyx_api.png\" />\n      </CardHeader>\n      <p>\n        This is my first major project stepping out of front-end development.\n        Everything I have made up until this point has focussed, in some way, on\n        visual design. The only visual aspect of this project is the GraphiQL\n        portal that's made available to communicate with the server. The stack\n        consists of Apollo Server (GraphQL), TypeScript and a Dependency\n        Injection Container. This is a project for me to experiment with\n        architecture, TDD & SOLID principles. I still have a lot to learn. Full\n        code for this project is{' '}\n        <StyledA href=\"https://github.com/CSMR-DB/phyx-api\">\n          available on GitHub\n        </StyledA>\n        .\n      </p>\n    </Card>\n  </Layout>\n)\n\nexport default Projects\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface IImageEdges {\n  images: {\n    edges: (IFluidImage)[]\n  }\n}\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nfunction renderImage(file: IFluidImage, key: number = 1) {\n  return <Img key={key} fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicImageProps {\n  path: string\n}\n\nconst DynamicImage = function({ path }: IDynamicImageProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 960) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }: IImageEdges) => {\n        // console.log(images)\n\n        return images.edges.map((image: IFluidImage, i: number) =>\n          image.node.relativePath === path ||\n          image.node.relativePath.includes(path)\n            ? renderImage(image, i)\n            : null\n        ) // Refactored so I can get ALL images from a provided folder portion of 'relativePath'\n\n        // return renderImage(\n        //   images.edges.find(\n        //     (image: IFluidImage) => image.node.relativePath.includes(path)\n        //   ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {â€¦}}\n        // )}\n      }}\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicImage\n","import styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { ColorProperty } from 'csstype'\n\ninterface IStyledLinkProps {\n  color?: ColorProperty\n}\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: ${(props: IStyledLinkProps) => props.color || 'rebeccapurple'};\n`\n\nexport const StyledA = styled.a`\n  text-decoration: none;\n  color: ${(props: IStyledLinkProps) => props.color || 'rebeccapurple'};\n`\n","import styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty } from 'csstype'\n\nexport const Card = styled.article`\n  padding: 2em;\n  border: 1px solid grey;\n  border-radius: 0.25rem;\n  margin-bottom: 1rem;\n\n  & h1 {\n    font-size: 1.5em;\n    margin: 0;\n  }\n\n  & h2 {\n    font-size: 1.1em;\n    font-style: italic;\n    margin: 0;\n    color: #aaa;\n  }\n\n  & p {\n    margin: 0;\n  }\n\n  & header {\n    margin-bottom: 2em;\n  }\n`\n\nexport const CardHeader = styled.header`\n  margin-bottom: 2em;\n`\n\nexport const CardHeaderText = styled.div`\n  padding-left: 2em;\n`\n\ninterface ICardHeaderIconWrapperProps {\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const CardHeaderIconWrapper: StyledComponent<\n  'div',\n  any,\n  ICardHeaderIconWrapperProps,\n  never\n> = styled.div`\n  border-radius: 999px;\n  overflow: hidden;\n  max-width: 4em;\n  width: 100%;\n  max-height: 4em;\n  height: 100%;\n  background: ${(props: ICardHeaderIconWrapperProps) =>\n    props.backgroundColor || '#DDD'};\n  padding: 0.5em;\n`\n"],"sourceRoot":""}