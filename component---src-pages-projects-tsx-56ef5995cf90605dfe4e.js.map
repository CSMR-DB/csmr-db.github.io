{"version":3,"sources":["webpack:///./src/pages/projects.tsx","webpack:///./src/components/dynamicimage.tsx"],"names":["Projects","title","path","href","target","DynamicImage","query","render","file","images","edges","find","image","node","relativePath","fluid","childImageSharp"],"mappings":"0FAAA,sDA8EeA,UAxEE,kBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,uBACX,4DACA,gKAIA,qDACA,2BACE,kBAAC,IAAD,CAAcC,KAAK,0BAErB,8aAMiD,IAC/C,uBAAGC,KAAK,8BAA8BC,OAAO,SAA7C,UAPF,KAYA,2CACA,kDACA,4lBAWA,+CACA,2BACE,kBAAC,IAAD,CAAcF,KAAK,iCAErB,sXAOA,gDACA,2BACE,kBAAC,IAAD,CAAcA,KAAK,4BAErB,8RAMA,wCACA,kDACA,kgB,gGCPWG,IArCM,YAAuC,IAA5BH,EAA4B,EAA5BA,KAC9B,OACE,kBAAC,IAAD,CACEI,MAAK,aAmBLC,OAAQ,gBA9BOC,EA8BJC,EAAH,EAAGA,OAAH,OA9BOD,EAgCXC,EAAOC,MAAMC,MACX,SAACC,GAAD,OAAwBA,EAAMC,KAAKC,eAAiBZ,KAhCvD,kBAAC,IAAD,CAAKa,MAAOP,EAAKK,KAAKG,gBAAgBD,SAS3C,W","file":"component---src-pages-projects-tsx-56ef5995cf90605dfe4e.js","sourcesContent":["import React from 'react'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport DynamicImage from '../components/dynamicimage'\n\nconst Projects = () => (\n  <Layout>\n    <SEO title=\"My Projects so far\" />\n    <h1>Yo! These are my projects =)</h1>\n    <p>\n      In chronological order. These are some projects I worked on that I am\n      proud of. They also got me some decent grades, which helps.\n    </p>\n    <h2>Modern Family Fansite</h2>\n    <p>\n      <DynamicImage path=\"projects/mdrnfml.png\" />\n    </p>\n    <p>\n      One of the first projects in year one that got me excited about\n      webdevelopment. This project is just purely HTML5 + CSS3. Nothing too\n      fancy, just the base necessities. The only thing that doesn't work is the\n      actor pages. They don't exist due to deadlines at that time. Also, there\n      are no links to the show's social pages. It was just a prototype to show\n      off HTML & CSS. This project can also be found{' '}\n      <a href=\"http://modernfamily.csmr.nl\" target=\"blank\">\n        online\n      </a>\n      .\n    </p>\n    <h2>Cloudcademy</h2>\n    <p>[IMAGE PLACEHOLDER]</p>\n    <p>\n      Cloudcademy was the big course assignment we were to work on to get a\n      final grade. We were just told to make \"a social media platform\" for any\n      subject we wanted. The subject itself didn't matter, as the goal was to\n      learn JavaScript. In this project I chose to focus on jQuery, as it\n      enabled me to get going faster. I made a login system (requirement), a\n      post submission form with a dynamic display of images & videos and stored\n      everything temporarily using the LocalStorage API to allow users to\n      refresh a page and still preserve all the posts that had already been\n      added.\n    </p>\n    <h2>Wordpress Theme</h2>\n    <p>\n      <DynamicImage path=\"projects/wpthemeexample.png\" />\n    </p>\n    <p>\n      At the end of year 1 there was this group project for a local students'\n      guild centered around iceskating. I took the responsibility for the\n      Wordpress website design upon me, learning a bit about the PHP used by\n      Wordpress to develop a theme that fully utilized the Customizer API.\n      Unfortunately, we weren't chosen to publish our design concept.\n    </p>\n    <h2>Abstract Dataviz</h2>\n    <p>\n      <DynamicImage path=\"projects/dataroute.png\" />\n    </p>\n    <p>\n      During my year 4 minor we had one major assignment: Take any form of data\n      you can find on your route from home to college. I chose mobile network\n      speed, took 20 points of measure, fiddled up some concepts and eventually\n      landed on this very abstract piece.\n    </p>\n    <h2>PHYX API</h2>\n    <p>[IMAGE PLACEHOLDER]</p>\n    <p>\n      This is my first major project stepping out of front-end development.\n      Everything I have made up until this point has focussed, in some way, on\n      visual design. The only visual aspect of this project is the GraphiQL\n      portal that's made available to communicate with the server. The stack\n      consists of Apollo Server (GraphQL), TypeScript and a Dependency Injection\n      Container. This is a project for me to experiment with architecture, TDD &\n      SOLID principles. I still have a lot to learn.\n    </p>\n  </Layout>\n)\n\nexport default Projects\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nfunction renderImage(file: IFluidImage) {\n  return <Img fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicImageProps {\n  path: string\n}\n\nconst DynamicImage = function({ path }: IDynamicImageProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 2048) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }) =>\n        renderImage(\n          images.edges.find(\n            (image: IFluidImage) => image.node.relativePath === path\n          ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {â€¦}}\n        )\n      }\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicImage\n"],"sourceRoot":""}