{"version":3,"sources":["webpack:///./src/components/Fixed.tsx","webpack:///./src/components/blend.tsx","webpack:///./src/components/StyledLink.tsx","webpack:///./src/components/MenuTile.tsx","webpack:///./src/components/Filter.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/flex.tsx","webpack:///./src/components/dynamicimage.tsx"],"names":["FixedElement","styled","div","props","width","height","top","left","Fixed","children","StyledDiv","isolation","mode","hoverMode","Blend","StyledLink","Link","color","MenuTile","blendMode","imagePath","to","background","title","path","Filter","StyledIndexPage","IndexPage","rows","columns","routes","map","route","i","key","size","strokeColor","strokeSize","fill","StyledFlex","justifyContent","Flex","DynamicImage","query","render","images","console","log","edges","image","node","relativePath","includes","file","fluid","childImageSharp"],"mappings":"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","file":"component---src-pages-index-tsx-607abe679ca80ffc0953.js","sourcesContent":["import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { WidthProperty, HeightProperty, TopProperty, LeftProperty } from 'csstype'\n\ninterface IFixedElementProps {\n  children: ReactNode\n  top?: TopProperty<1>\n  left?: LeftProperty<1>\n  width?: WidthProperty<1>\n  height?: HeightProperty<1>\n}\n\nconst FixedElement: StyledComponent<'div', any, IFixedElementProps, never> = styled.div`\n  position: fixed;\n  width: ${(props: IFixedElementProps) => props.width || '100%'};\n  height: ${(props: IFixedElementProps) => props.height || '100%'};\n  top: ${(props:IFixedElementProps) =>  props.top || '0'};\n  left: ${(props:IFixedElementProps) => props.left || '0'};\n`\n\nexport const Fixed = ({ children, top, left, width, height }: IFixedElementProps) => (\n  <FixedElement top={top} left={left} width={width} height={height}>{children}</FixedElement>\n)\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { MixBlendModeProperty } from 'csstype'\n\ninterface IBlend {\n  children: ReactNode\n  mode: MixBlendModeProperty\n  hoverMode?: MixBlendModeProperty\n  isolation?: boolean\n}\n\nconst StyledDiv: StyledComponent<'div', any, IBlend, never> = styled.div`\n  position: relative;\n  isolation: ${(props: IBlend) => (props.isolation ? 'isolate' : 'auto')};\n  overflow: hidden; /** to make sure the containing element has no children overlapping parent's sibling elements */\n\n  & > :first-child {\n    position: relative !important;\n  }\n\n  :hover > :first-child {\n    transform: scale(1.1);\n  }\n\n  & > * {\n    mix-blend-mode: ${(props: IBlend) => props.mode};\n    position: absolute !important; /** to work with gatsby-image, adding !important is a required override */\n    width: 100%;\n    height: 100%;\n    top: 0;\n    transition: all 0.25s ease-in-out;\n\n    :hover {\n      mix-blend-mode: ${(props: IBlend) => props.hoverMode || props.mode};\n    }\n  }\n`\n\nconst Blend = ({ children, mode, hoverMode, isolation = false }: IBlend) => (\n  <StyledDiv mode={mode} isolation={isolation} hoverMode={hoverMode}>\n    {children}\n  </StyledDiv>\n)\n\nexport default Blend\n","import styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { ColorProperty } from 'csstype'\n\ninterface IStyledLinkProps {\n  color?: ColorProperty\n}\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: ${(props: IStyledLinkProps) => props.color || 'rebeccapurple'};\n`\n","import React from 'react'\r\nimport { BackgroundColorProperty, BlendMode } from \"csstype\";\r\nimport Blend from \"./blend\";\r\nimport DynamicImage from \"./dynamicimage\";\r\nimport { StyledLink } from \"./StyledLink\";\r\nimport Flex from \"./flex\";\r\n\r\ninterface IMenuTileProps {\r\n  blendMode: BlendMode\r\n  imagePath?: string\r\n  to: string\r\n  background: BackgroundColorProperty\r\n  title: string\r\n}\r\n\r\nexport const MenuTile = ({\r\n  blendMode,\r\n  imagePath,\r\n  to,\r\n  background,\r\n  title,\r\n}: IMenuTileProps) => (\r\n  <Blend mode={blendMode} isolation={true}>\r\n    {imagePath ? <DynamicImage path={imagePath} /> : null}\r\n    <StyledLink color=\"white\" to={to}>\r\n      <Flex background={background}>\r\n        <h1>{title}</h1>\r\n      </Flex>\r\n    </StyledLink>\r\n  </Blend>\r\n)","import styled from \"styled-components\";\r\n\r\n\r\nexport const Filter = styled.div`\r\n  filter: blur(.5em) sepia(.5) saturate(2) grayscale(.5);\r\n  transform: scale(1.2);\r\n  height: 100%;\r\n`","import React from 'react'\nimport SEO from '../components/seo'\nimport Flex from '../components/flex'\nimport { Grid } from '../components/grid'\nimport { Fixed } from '../components/Fixed'\nimport Logo from '../components/logo'\nimport { routes } from '../data/routes'\nimport { MenuTile } from '../components/MenuTile'\nimport DynamicImage from '../components/dynamicimage'\nimport { Filter } from '../components/Filter'\nimport styled from 'styled-components'\n\nconst StyledIndexPage = styled.div`\n  .gatsby-image-wrapper {\n    height: 100%\n  }\n`\n\nconst IndexPage = () => (\n  <StyledIndexPage>\n    <SEO title=\"Homepage\" />\n    <Fixed top={'0px'} left={'0px'} height=\"100vh\" width=\"100vw\">\n      <Filter>\n        <DynamicImage path=\"wallpaper/wallpaper.jpg\" />\n      </Filter>\n    </Fixed>\n    <Grid height=\"100vh\" rows={2} columns={2}>\n      {routes.map((route, i) => (\n        <MenuTile\n          key={i}\n          blendMode=\"overlay\"\n          to={route.path}\n          background=\"rgba(66, 66, 66, .2)\"\n          title={route.title}\n        />\n      ))}\n    </Grid>\n    <Fixed top=\"calc(50% - 8em)\" left=\"calc(50% - 8em)\" width=\"16em\" height=\"16em\">\n      <Flex>\n        <Logo\n          size={192}\n          strokeColor=\"white\"\n          strokeSize={4}\n          fill=\"transparent\"\n        />\n      </Flex>\n    </Fixed>\n  </StyledIndexPage>\n)\n\nexport default IndexPage\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { BackgroundColorProperty, JustifyContentProperty } from 'csstype'\n\ninterface IFlexProps {\n  children: ReactNode\n  background?: BackgroundColorProperty\n  justifyContent?: JustifyContentProperty\n}\n\nconst StyledFlex: StyledComponent<'div', any, IFlexProps, never> = styled.div`\n  position: relative;\n  background: ${(props: IFlexProps) => props.background || 'transparent'};\n\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: IFlexProps) =>\n    props.justifyContent || 'space-around'};\n  transition: all 0.25s ease-in-out;\n\n  :hover {\n    background: transparent;\n  }\n\n  * {\n    /* flex-grow: 1; */\n  }\n`\n\nconst Flex = ({ children, background, justifyContent }: IFlexProps) => (\n  <StyledFlex background={background} justifyContent={justifyContent}>\n    {children}\n  </StyledFlex>\n)\n\nexport default Flex\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface IImageEdges {\n  images: {\n    edges: (IFluidImage)[]\n  }\n}\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\nfunction renderImage(file: IFluidImage, key: number = 1) {\n  return <Img key={key} fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicImageProps {\n  path: string\n}\n\nconst DynamicImage = function({ path }: IDynamicImageProps) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 960) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }: IImageEdges) =>{\n        console.log(images)\n\n        return images.edges.map((image: IFluidImage, i: number) => image.node.relativePath === path || image.node.relativePath.includes(path) ? renderImage(image, i) : null) // Refactored so I can get ALL images from a provided folder portion of 'relativePath'\n\n        // return renderImage(\n        //   images.edges.find(\n        //     (image: IFluidImage) => image.node.relativePath.includes(path)\n        //   ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {…}}\n        // )}\n      }}\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n\nexport default DynamicImage\n"],"sourceRoot":""}