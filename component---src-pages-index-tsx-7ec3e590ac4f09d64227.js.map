{"version":3,"sources":["webpack:///./src/layouts/IndexLayout.tsx","webpack:///./src/pages/index.tsx"],"names":["LiftedUpWrapper","styled","div","theme","breakpoints","max","smartphone","IndexLayout","data","title","description","site","siteMetadata","maxWidth","columns","to","skillsetData","edges","map","i","frontmatter","node","level","excerpt","time","key","index","skillColor","programmingData","timeToRead","tags","video","featuredVideo","image","featuredImage","body","path","date","IndexPage"],"mappings":"2KAqCMA,EAA0DC,IAAOC,IAAV,mFAAGD,CAAH,mDAGlDE,IAAMC,YAAYC,IAAIC,YAK1B,SAASC,EAAT,GAAqE,IAA9CC,EAA8C,EAA9CA,KAC5B,OACE,oCACE,kBAAC,IAAD,CACEC,MAAK,WACLC,YAAaF,EAAKG,KAAKC,aAAaF,cAEtC,kBAACV,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAea,SAAU,UACvB,kBAAC,IAAD,CAAMC,QAAS,GACb,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,mDAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,uCAGJ,kBAAC,IAAD,KACE,yIAIA,oSAOA,sZAYJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWC,GAAI,UAAf,0BAKR,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,mDAGHP,EAAKQ,aAAaC,MAAMC,KACvB,WAEEC,GAFF,IACYC,EADZ,EACIC,KAAQD,YADZ,OAIE,kBAAC,IAAD,CACEE,MAAOF,EAAYE,OAAS,EAC5Bb,MAAOW,EAAYX,MACnBC,YAAaU,EAAYG,QACzBC,KAAMJ,EAAYI,KAClBC,IAAKN,EACLO,MAAOP,EACPQ,WAAYP,EAAYO,gBAI9B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWZ,GAAI,aAAf,2BAOR,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kDAGHP,EAAKoB,gBAAgBX,MAAMC,KAC1B,WAEEC,GAFF,QACIE,KAAQD,EADZ,EACYA,YAAaS,EADzB,EACyBA,WADzB,OAIE,kBAAC,IAAD,CACEpB,MAAOW,EAAYX,MACnBqB,KAAMV,EAAYU,KAClBC,MAAOX,EAAYY,cACnBC,MAAOb,EAAYc,cACnBC,KAAMf,EAAYG,QAClBM,WAAYA,EACZO,KAAMhB,EAAYgB,KAClBC,KAAMjB,EAAYiB,KAClBZ,IAAKN,EACLO,MAAOP,OAIb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWJ,GAAI,aAAf,wCCjGPuB,UAzDsB,WACnC,IAAM9B,EAGmB,OAiDzB,OAAO,kBAACD,EAAD,CAAaC,KAAMA,M","file":"component---src-pages-index-tsx-7ec3e590ac4f09d64227.js","sourcesContent":["import React from 'react'\nimport {\n  SEO,\n  Grid,\n  CenteredBlock,\n  SkillCard,\n  ProjectCard,\n  Card,\n  CardBody,\n  CTAButton,\n  CardHeader,\n  CardHeaderText,\n  ContentSeparator,\n} from '../components'\nimport {\n  ISkillsetAllMarkdownRemark,\n  IProjectsAllMarkdownRemark,\n  ISkillsetEdge,\n  IProjectsEdge,\n} from '../templates/interfaces'\nimport styled, { StyledComponent } from 'styled-components'\nimport { theme } from '../data/theme'\n\nexport interface ISiteMetadata {\n  site: {\n    siteMetadata: {\n      title: string\n      description: string\n      author: string\n    }\n  }\n\n  skillsetData: ISkillsetAllMarkdownRemark\n\n  programmingData: IProjectsAllMarkdownRemark\n}\n\nconst LiftedUpWrapper: StyledComponent<'div', any, {}, never> = styled.div`\n  margin: -8rem auto 0;\n\n  @media ${theme.breakpoints.max.smartphone} {\n    margin: 0 auto;\n  }\n`\n\nexport function IndexLayout({ data }: { data: ISiteMetadata }): JSX.Element {\n  return (\n    <>\n      <SEO\n        title={`Homepage`}\n        description={data.site.siteMetadata.description}\n      />\n      <LiftedUpWrapper>\n        <ContentSeparator>\n          <CenteredBlock maxWidth={'110rem'}>\n            <Grid columns={3}>\n              <div>\n                <Grid>\n                  <Card>\n                    <CardBody>\n                      <h1>Why I make things</h1>\n                    </CardBody>\n                  </Card>\n                  <Card>\n                    <CardHeader>\n                      <CardHeaderText>\n                        <h1>TL;WR</h1>\n                      </CardHeaderText>\n                    </CardHeader>\n                    <CardBody>\n                      <p>\n                        I find the ability to create something out of nothing\n                        but some text and symbols just absolutely fantastic.\n                      </p>\n                      <p>\n                        I learned about programming at college, where it was\n                        just part of the entire curriculum. During my time\n                        there, I taught myself mostly CSS & HTML, but also a\n                        decent amount of JavaScript. I played with React, Vue,\n                        MeteorJS, CSS preprocessors like Stylus and SASS.\n                      </p>\n                      <p>\n                        Post-college I started experimenting with Back-end\n                        NodeJS, GraphQL, MongoDB and, most importantly,\n                        TypeScript. I also dipped my toes in the Angular\n                        framework and messed with some Svelte. But whatever\n                        framework / library you want to work with honestly\n                        doesn't matter. You can learn to use & master a\n                        framework, yet understanding the underlying language is\n                        what matters most.\n                      </p>\n                    </CardBody>\n                  </Card>\n                  <Card>\n                    <CardBody>\n                      <CTAButton to={'/about'}>Let me tell you...</CTAButton>\n                    </CardBody>\n                  </Card>\n                </Grid>\n              </div>\n              <div>\n                <Grid>\n                  <Card>\n                    <CardBody>\n                      <h1>How I make things</h1>\n                    </CardBody>\n                  </Card>\n                  {data.skillsetData.edges.map(\n                    (\n                      { node: { frontmatter } }: ISkillsetEdge,\n                      i: number\n                    ): JSX.Element => (\n                      <SkillCard\n                        level={frontmatter.level || 0}\n                        title={frontmatter.title}\n                        description={frontmatter.excerpt}\n                        time={frontmatter.time}\n                        key={i}\n                        index={i}\n                        skillColor={frontmatter.skillColor}\n                      />\n                    )\n                  )}\n                  <Card>\n                    <CardBody>\n                      <CTAButton to={'/skillset'}>\n                        What else can I do?\n                      </CTAButton>\n                    </CardBody>\n                  </Card>\n                </Grid>\n              </div>\n              <div>\n                <Grid>\n                  <Card>\n                    <CardBody>\n                      <h1>What I have made</h1>\n                    </CardBody>\n                  </Card>\n                  {data.programmingData.edges.map(\n                    (\n                      { node: { frontmatter, timeToRead } }: IProjectsEdge,\n                      i: number\n                    ): JSX.Element => (\n                      <ProjectCard\n                        title={frontmatter.title}\n                        tags={frontmatter.tags}\n                        video={frontmatter.featuredVideo}\n                        image={frontmatter.featuredImage}\n                        body={frontmatter.excerpt}\n                        timeToRead={timeToRead}\n                        path={frontmatter.path}\n                        date={frontmatter.date}\n                        key={i}\n                        index={i}\n                      />\n                    )\n                  )}\n                  <Card>\n                    <CardBody>\n                      <CTAButton to={'/projects'}>\n                        Read more about my projects\n                      </CTAButton>\n                    </CardBody>\n                  </Card>\n                </Grid>\n              </div>\n            </Grid>\n          </CenteredBlock>\n        </ContentSeparator>\n      </LiftedUpWrapper>\n    </>\n  )\n}\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { IndexLayout, ISiteMetadata } from '../layouts/IndexLayout'\nimport { IProjectsLayoutProps } from '../layouts/ProjectsLayout'\nimport { ISkillsetLayoutProps } from '../layouts/SkillsetLayout'\n\nconst IndexPage: () => JSX.Element = (): JSX.Element => {\n  const data: ISiteMetadata &\n    IProjectsLayoutProps &\n    // tslint:disable-next-line: no-void-expression\n    ISkillsetLayoutProps = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n        }\n      }\n\n      skillsetData: allMarkdownRemark(\n        filter: {\n          frontmatter: { path: { regex: \"/tag/\" }, favorite: { eq: true } }\n        }\n        sort: { fields: frontmatter___time, order: DESC }\n        limit: 3\n      ) {\n        edges {\n          node {\n            frontmatter {\n              path\n              title\n              excerpt\n              level\n              skillColor\n              time\n              favorite\n            }\n            excerpt\n          }\n        }\n      }\n\n      programmingData: allMarkdownRemark(\n        filter: {\n          frontmatter: {\n            path: { regex: \"/projects/\" }\n            category: { eq: \"Programming\" }\n            favorite: { eq: true }\n          }\n        }\n        sort: { fields: frontmatter___date, order: DESC }\n        limit: 3\n      ) {\n        ...SharedOPQuery\n      }\n    }\n  `)\n\n  return <IndexLayout data={data} />\n}\n\n// tslint:disable-next-line: no-default-export\nexport default IndexPage\n"],"sourceRoot":""}