{"version":3,"sources":["webpack:///./src/components/ExperienceCard.tsx","webpack:///./src/pages/skillset.tsx","webpack:///./src/components/Card.tsx","webpack:///./src/components/flex.tsx","webpack:///./src/components/SkillCard.tsx","webpack:///./src/components/DynamicIcon.tsx","webpack:///./node_modules/core-js/modules/es6.array.find.js"],"names":["ExperienceCardHeader","styled","header","ExperienceCardHeaderText","div","ExperienceCard","name","type","icon","dateRange","description","backgroundColor","Card","justifyContent","DynamicIcon","path","ContentSeparator","SkillsetPage","title","CenteredBlock","Grid","columns","maxWidth","query","render","allMarkdownRemark","edges","map","i","frontmatter","node","SkillCard","level","excerpt","time","key","StyledLink","to","article","CardHeader","CardHeaderFeaturedImage","maxHeight","CardHeaderText","CardHeaderIconWrapper","props","CardBody","main","CardFooter","footer","StyledFlex","background","Flex","children","StyledIndicator","span","lit","StyledIndicatorGrid","StyledSkillCardHeader","SkillCardBackdrop","replace","toLocaleLowerCase","Array","isArray","string","url","href","target","text","StyledDynamicIcon","Img","file","images","find","image","relativePath","fluid","childImageSharp","$export","$find","forced","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"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","file":"component---src-pages-skillset-tsx-31c7374a299028156bff.js","sourcesContent":["import React from 'react'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { BackgroundColorProperty } from 'csstype'\nimport {\n  Card,\n  CardHeader,\n  CardHeaderIconWrapper,\n  CardHeaderText,\n  CardBody,\n} from './Card'\nimport { Flex } from './flex'\nimport { DynamicIcon } from './DynamicIcon'\nimport styled, { StyledComponent } from 'styled-components'\n\ninterface IExperienceCardProps {\n  name: string\n  type: string\n  icon: string\n  dateRange: string\n  description: string\n  backgroundColor: BackgroundColorProperty\n}\n\nconst ExperienceCardHeader: StyledComponent<\n  'header',\n  any,\n  {},\n  never\n> = styled.header`\n  padding: 2em 2em 0em 2em;\n\n  h2 {\n    margin: 0;\n  }\n`\n\nconst ExperienceCardHeaderText: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding: 0 2em;\n`\n\nexport const ExperienceCard: ({\n  name,\n  type,\n  icon,\n  dateRange,\n  description,\n  backgroundColor,\n}: IExperienceCardProps) => JSX.Element = ({\n  name,\n  type,\n  icon,\n  dateRange,\n  description,\n  backgroundColor,\n}: IExperienceCardProps): JSX.Element => (\n  <Card>\n    <ExperienceCardHeader>\n      <Flex justifyContent=\"flex-start\">\n        <CardHeaderIconWrapper backgroundColor={backgroundColor}>\n          <DynamicIcon path={icon} />\n        </CardHeaderIconWrapper>\n        <ExperienceCardHeaderText>\n          <h1>\n            {name} ({type})\n          </h1>\n          <h2>{dateRange}</h2>\n        </ExperienceCardHeaderText>\n      </Flex>\n    </ExperienceCardHeader>\n    <CardBody>\n      <main>\n        <p>{description}</p>\n      </main>\n    </CardBody>\n  </Card>\n)\n","import React from 'react'\nimport { Layout } from '../components/layout'\nimport { SEO } from '../components/seo'\nimport { SkillCard } from '../components/SkillCard'\nimport styled, { StyledComponent } from 'styled-components'\nimport { ExperienceCard } from '../components/ExperienceCard'\nimport { CenteredBlock } from '../components/CenteredBlock'\nimport { Grid } from '../components/Grid'\nimport { StyledLink } from '../components/StyledLink'\nimport { StaticQuery, graphql } from 'gatsby'\nimport { IListItemData, IEdge } from '../templates/interfaces'\n\nconst ContentSeparator: StyledComponent<'div', any, {}, never> = styled.div`\n  padding-bottom: 4rem;\n`\n\nconst SkillsetPage: () => JSX.Element = (): JSX.Element => (\n  <Layout>\n    <SEO\n      title=\"Skillset\"\n      description=\"This is my trying to provide you with an indication about my capabilities & goals looking forward\"\n    />\n    <CenteredBlock>\n      <ContentSeparator>\n        <h1>Education</h1>\n        <ExperienceCard\n          name=\"Digital Media & Communication\"\n          type=\"HBO\"\n          icon=\"icons/hu_logo.jpg\"\n          dateRange=\"sep 2015 - feb 2019\"\n          description=\"This is where my interest in programming started, as well as my first steps into graphic design. I learned about marketing and doing user research. Halfway through my final year I decided to drop out due to lack of motivation as I wanted to pursue learning more about programming.\"\n          backgroundColor=\"#298CCD\"\n        />\n      </ContentSeparator>\n      <ContentSeparator>\n        <h1>Professional experience</h1>\n        <ExperienceCard\n          name=\"SmartHOTEL\"\n          type=\"Internship\"\n          icon=\"icons/smarthotel_logo.png\"\n          dateRange=\"sep 2017 - feb 2018\"\n          description=\"I worked on a data visualization dashboard to provide the company with\n        insights in their key metrics, to see how their BHAG (Big, Hairy,\n        Audacious Goal) was progressing. This project was built using MeteorJS,\n        React (with styled-components), D3.js, GraphQL and the database of\n        choice was MongoDB. It was deployed locally on an Ubuntu Server VM and\n        had a C# application to collect the data running on a Windows Server VM.\n        There is nothing to show for it, since it was an internal project. No\n        access from outside.\"\n          backgroundColor=\"#F18600\"\n        />\n      </ContentSeparator>\n      <ContentSeparator>\n        <h1>So, you want to know more?</h1>\n        <p>\n          From my experience so far, programming is about 20% actually writing\n          code and 80% \"looking stuff up\", gathering requirements, defining test\n          scenarios. Obviously, this can vary on a daily basis. But when it\n          comes to actually creating, how do I think I'd score? The time spent\n          is a rough estimate and should be seen as a total of the 20 / 80\n          split.\n        </p>\n      </ContentSeparator>\n    </CenteredBlock>\n    <ContentSeparator>\n      <Grid columns=\"repeat(auto-fill, minmax(20rem, 1fr))\" maxWidth=\"100rem\">\n        <StaticQuery\n          // tslint:disable-next-line: no-void-expression\n          query={graphql`\n            query {\n              allMarkdownRemark(\n                filter: { frontmatter: { path: { regex: \"/tag/\" } } }\n                sort: { fields: frontmatter___title }\n              ) {\n                edges {\n                  node {\n                    frontmatter {\n                      path\n                      title\n                      excerpt\n                      level\n                      time\n                    }\n                    excerpt\n                  }\n                }\n              }\n            }\n          `}\n          render={({\n            allMarkdownRemark,\n          }: IListItemData['data']): (JSX.Element | null)[] => {\n            return allMarkdownRemark.edges.map(\n              ({ node: { frontmatter } }: IEdge, i: number) => (\n                <SkillCard\n                  level={frontmatter.level || 0}\n                  title={frontmatter.title}\n                  description={frontmatter.excerpt}\n                  time={frontmatter.time}\n                  key={i}\n                />\n              )\n            )\n          }}\n        />\n      </Grid>\n    </ContentSeparator>\n    <ContentSeparator>\n      <CenteredBlock>\n        <p>\n          I would like to point out that these scores are more \"relative\" to\n          each other than \"absolute\". Whatever the subject, there's still a lot\n          to learn. I also know that whatever problem I may face dealing with\n          code, eventually a solution will come. I also know that becoming an\n          expert in any field takes at least 10.000 hours of practise. More\n          often than not, I'll be browsing Medium to look for new blogposts\n          regarding JS. Always trying to imrpove. Most importantly investing\n          more time in JavaScript / TypeScript than any specific framework, so\n          that it'll be easier to pick up whatever comes next.\n        </p>\n        <p>\n          But, as I also mention in the{' '}\n          <StyledLink to=\"/about\">about me section</StyledLink>, I have some\n          experience with other programs outside of programming.\n        </p>\n      </CenteredBlock>\n    </ContentSeparator>\n  </Layout>\n)\n\n// tslint:disable-next-line: no-default-export\nexport default SkillsetPage\n","import styled, { StyledComponent } from 'styled-components'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { BackgroundColorProperty, MaxHeightProperty } from 'csstype'\n\nexport const Card: StyledComponent<'article', any, {}, never> = styled.article`\n  position: relative;\n  border-radius: 0.25rem;\n  display: grid;\n  grid-template-areas: 'header' 'body' 'footer';\n  grid-template-rows: auto 1fr auto;\n  overflow: hidden;\n  background: white;\n  box-shadow: 0 0.075rem 0.075rem rgba(0, 0, 0, 0.1),\n    0 0.125rem 0.125rem rgba(0, 0, 0, 0.25);\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n\n  & header img {\n    transition: all 0.2s ease-in-out !important;\n  }\n\n  &:hover {\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.25),\n      0 0.25rem 0.25rem rgba(0, 0, 0, 0.2);\n    transform: translateY(-4px);\n\n    & header img {\n      transform: scale(1.1);\n    }\n  }\n\n  & h1 {\n    font-size: 1.5em;\n    margin: 0;\n  }\n\n  & h2 {\n    font-size: 1.1em;\n    font-style: italic;\n    margin: 0;\n    color: #aaa;\n    margin-bottom: 1rem;\n  }\n\n  & p {\n    margin: 0;\n    text-align: justify;\n  }\n`\n\nexport const CardHeader: StyledComponent<\n  'header',\n  any,\n  {},\n  never\n> = styled.header`\n  /* margin-bottom: 2em; */\n  grid-area: 'header';\n`\n\ninterface ICardHeaderFeaturedImageProps {\n  maxHeight?: MaxHeightProperty<1>\n}\n\nexport const CardHeaderFeaturedImage: StyledComponent<\n  'div',\n  any,\n  ICardHeaderFeaturedImageProps,\n  never\n> = styled.div`\n  max-height: ${({\n    maxHeight,\n  }: ICardHeaderFeaturedImageProps): MaxHeightProperty<1> =>\n    maxHeight || '18rem'};\n  min-height: ${({\n    maxHeight,\n  }: ICardHeaderFeaturedImageProps): MaxHeightProperty<1> =>\n    maxHeight || '18rem'};\n  overflow: hidden;\n\n  & > * {\n    max-height: ${({\n      maxHeight,\n    }: ICardHeaderFeaturedImageProps): MaxHeightProperty<1> =>\n      maxHeight || '18rem'};\n    min-height: ${({\n      maxHeight,\n    }: ICardHeaderFeaturedImageProps): MaxHeightProperty<1> =>\n      maxHeight || '18rem'};\n  }\n`\n\nexport const CardHeaderText: StyledComponent<\n  'div',\n  any,\n  {},\n  never\n> = styled.div`\n  padding: 2em 2em 0 2em;\n\n  & > * {\n    margin: 0;\n  }\n`\n\ninterface ICardHeaderIconWrapperProps {\n  backgroundColor: BackgroundColorProperty\n}\n\nexport const CardHeaderIconWrapper: StyledComponent<\n  'div',\n  any,\n  ICardHeaderIconWrapperProps,\n  never\n> = styled.div`\n  border-radius: 999px;\n  overflow: hidden;\n  max-width: 4em;\n  width: 100%;\n  max-height: 4em;\n  height: 100%;\n  background: ${(props: ICardHeaderIconWrapperProps): BackgroundColorProperty =>\n    props.backgroundColor || '#DDD'};\n  padding: 0.5em;\n`\n\nexport const CardBody: StyledComponent<'main', any, {}, never> = styled.main`\n  position: relative;\n  padding: 2em;\n  grid-area: 'body';\n`\n\nexport const CardFooter: StyledComponent<\n  'footer',\n  any,\n  {},\n  never\n> = styled.footer`\n  background: #eee;\n  padding: 2em;\n  border-top: 1px solid #ddd;\n  grid-area: 'footer';\n`\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { BackgroundColorProperty, JustifyContentProperty } from 'csstype'\n\nexport interface IFlexProps {\n  children: ReactNode\n  background?: BackgroundColorProperty\n  justifyContent?: JustifyContentProperty\n}\n\nconst StyledFlex: StyledComponent<'div', any, IFlexProps, never> = styled.div`\n  position: relative;\n  background: ${(props: IFlexProps): BackgroundColorProperty =>\n    props.background || 'transparent'};\n\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: IFlexProps): JustifyContentProperty =>\n    props.justifyContent || 'space-around'};\n  transition: all 0.25s ease-in-out;\n\n  :hover {\n    background: transparent;\n  }\n`\n\nexport const Flex: ({\n  children,\n  background,\n  justifyContent,\n}: IFlexProps) => JSX.Element = ({\n  children,\n  background,\n  justifyContent,\n}: IFlexProps): JSX.Element => (\n  <StyledFlex background={background} justifyContent={justifyContent}>\n    {children}\n  </StyledFlex>\n)\n","import React, { ReactNode } from 'react'\nimport styled, { StyledComponent } from 'styled-components'\nimport { Card, CardBody } from './Card'\nimport { Flex } from './flex'\nimport { DynamicImage } from './dynamicimage'\nimport { StyledA, StyledLink } from './StyledLink'\nimport { StringOrUrlObject, StringOrUrlArray } from '../types/StringOrUrlObject'\n// tslint:disable-next-line: no-implicit-dependencies\nimport { BackgroundColorProperty } from 'csstype'\n\ninterface ISkillCardProps {\n  children?: ReactNode\n  level: number\n  title: string\n  description: StringOrUrlArray\n  time?: number\n}\n\ninterface IStyledIndicator {\n  lit: boolean\n}\n\nconst StyledIndicator: StyledComponent<\n  'span',\n  any,\n  IStyledIndicator,\n  never\n> = styled.span`\n  display: inline-block;\n  margin-right: 0.5rem;\n  padding: 0.25rem;\n  width: 1rem;\n  height: 1rem;\n  border-radius: 1rem;\n  background: ${(props: IStyledIndicator): BackgroundColorProperty =>\n    props.lit ? '#ffb74d' : 'lightgrey'};\n`\n\nconst StyledIndicatorGrid: StyledComponent<'div', any, {}, never> = styled.div`\n  min-width: 8rem;\n  margin-right: 1rem;\n`\n\nconst StyledSkillCardHeader: StyledComponent<\n  'header',\n  any,\n  {},\n  never\n> = styled.header`\n  h1 {\n    font-size: 1rem;\n    font-weight: 100;\n    text-align: right;\n    align-self: normal;\n  }\n  h2 {\n    font-size: 0.8rem;\n    font-weight: 100;\n  }\n`\n\nconst SkillCardBackdrop: StyledComponent<'div', any, {}, never> = styled.div`\n  position: absolute;\n  bottom: 1rem;\n  right: 1rem;\n  width: 100%;\n  max-width: 8rem;\n  filter: opacity(0.075);\n`\n\nexport const SkillCard: ({\n  level,\n  title,\n  description,\n  time,\n}: ISkillCardProps) => JSX.Element = ({\n  // children,\n  level,\n  title,\n  description,\n  time,\n}: ISkillCardProps): JSX.Element => (\n  <Card>\n    <SkillCardBackdrop>\n      <DynamicImage\n        path={`code-icons/${title\n          .replace(/\\([0-9]*\\)|\\s+/gi, '')\n          .toLocaleLowerCase()}.png`}\n      />\n    </SkillCardBackdrop>\n    <CardBody>\n      <StyledSkillCardHeader>\n        <Flex justifyContent=\"space-between\">\n          {/* {level && level >= -1 && ( */}\n          <StyledIndicatorGrid>\n            <StyledIndicator lit={level >= 1}></StyledIndicator>\n            <StyledIndicator lit={level >= 2}></StyledIndicator>\n            <StyledIndicator lit={level >= 3}></StyledIndicator>\n            <StyledIndicator lit={level >= 4}></StyledIndicator>\n            <StyledIndicator lit={level === 5}></StyledIndicator>\n          </StyledIndicatorGrid>\n          {/* )} */}\n          <h1>\n            <StyledLink\n              to={`/tag/${title.toLocaleLowerCase().replace(/\\s+/gi, '_')}`}\n            >\n              {title}\n            </StyledLink>\n          </h1>\n        </Flex>\n        <h2>(time spent: ~{time || 0} hours)</h2>\n      </StyledSkillCardHeader>\n\n      <p>\n        {Array.isArray(description)\n          ? description.map((string: StringOrUrlObject, i: number) => {\n              if (typeof string !== 'string' && string.url) {\n                return (\n                  <StyledA href={string.url} target=\"blank\" key={i}>\n                    {string.text}\n                  </StyledA>\n                )\n              }\n\n              return string\n            })\n          : description}\n      </p>\n    </CardBody>\n  </Card>\n)\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\nimport { StaticQuery, graphql } from 'gatsby'\nimport styled, { StyledComponent } from 'styled-components'\n\ninterface IFluidImage {\n  node: {\n    extension: string\n    relativePath: string\n    childImageSharp: {\n      fluid: FluidObject\n    }\n  }\n}\n\ninterface IImagesRoot {\n  // images: {\n  //   edges: (IFluidImage)[]\n  // }\n  images: any // temp fix\n}\n\nconst StyledDynamicIcon: StyledComponent<typeof Img, any, {}, never> = styled(\n  Img\n)`\n  max-width: 4rem;\n  width: 100%;\n  max-height: 4rem;\n  height: 100%;\n`\n\nfunction renderImage(file: IFluidImage): JSX.Element {\n  return <StyledDynamicIcon fluid={file.node.childImageSharp.fluid} />\n}\n\ninterface IDynamicIconProps {\n  path: string\n}\n\nexport const DynamicIcon: ({\n  path,\n}: IDynamicIconProps) => JSX.Element = function({\n  path,\n}: IDynamicIconProps): JSX.Element {\n  return (\n    <StaticQuery\n      // tslint:disable-next-line: no-void-expression\n      query={graphql`\n        query {\n          images: allFile(\n            filter: { extension: { regex: \"/jpeg|jpg|png|gif/\" } }\n          ) {\n            edges {\n              node {\n                extension\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 128) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ images }: IImagesRoot): JSX.Element | null =>\n        renderImage(\n          images.edges.find(\n            (image: IFluidImage) => image.node.relativePath === path\n          ) // returns images like this node: {extension: \"png\", relativePath: \"gatsby-icon.png\", childImageSharp: {…}}\n        )\n      }\n    />\n  )\n}\n\n/**\n * Question remains: how much impact will many (100s) of images have?\n */\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}